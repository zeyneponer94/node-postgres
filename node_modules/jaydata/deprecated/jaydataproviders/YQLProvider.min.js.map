{"version":3,"sources":["YQLProvider.js","src/Types/StorageProviders/YQL/EntitySets/YQLContext.js","src/Types/StorageProviders/YQL/EntitySets/geo.js","src/Types/StorageProviders/YQL/YQLCompiler.js","src/Types/StorageProviders/YQL/YQLConverter.js","src/Types/StorageProviders/YQL/YQLProvider.js","src/Types/StorageProviders/YQL/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","$data","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","_interopRequireDefault","obj","__esModule","default","_core","_core2","Class","EntityContext","Continents","type","EntitySet","elementType","Yahoo","types","Geo","continent","tableName","Counties","county","Countries","country","Districts","district","Oceans","ocean","Places","place","PlaceTypes","placetype","PlaceSiblings","sibling","PlaceParents","parent","PlaceNeighbors","neighbor","PlaceCommons","common","PlaceChildrens","children","PlaceBelongtos","belongto","PlaceAncestors","ancestor","Seas","sea","States","state","PlaceDescendants","descendant","placeTypeNameRef","value","placeTypeNameCf","centroidRef","centroidCf","countryRef","countryCf","adminRef","adminCf","localityRef","localityCf","postalRef","postalCf","boundingBoxRef","boundingBoxCf","Atom","anonymousResult","resultPath","resultSkipFirstLevel","Entity","url","required","searchable","Csv","charset","columns","DataUri","Feed","FeedNormalizer","output","prexslurl","postxslurl","timeout","Html","browser","xpath","compat","description","Result","Json","itemPath","Rss","guid","title","link","pubDate","GuidField","isPermaLink","content","Xml","Xslt","xml","stylesheet","stylesheetliteral","wrapperelement","jaydata/core","2","latitude","longitude","southWest","northEast","woeid","key","name","uri","placeTypeName","lang","defineEx","PlaceMeta","admin1","admin2","admin3","locality1","locality2","postal","centroid","boundingBox","areaRank","popRank","placeTypeDescription","PlaceMetaFull","sibling_woeid","child_woeid","neighbor_woeid","woeid1","woeid2","woeid3","woeid4","woeid5","woeid6","woeid7","woeid8","long","parent_woeid","member_woeid","descendant_woeid","text","focus","view","ancestor_woeid","degree","Container","registerType","3","$C","Expressions","EntityExpressionVisitor","constructor","provider","cTypeCache","compile","query","context","storageProvider","filterSql","sql","projectionSql","orderSql","skipSql","takeSql","Visit","expression","skipVal","sqlPre","sqlSuf","queryText","selectMapping","selectFields","params","VisitFilterExpression","source","nodeType","selector","VisitProjectionExpression","Guard","raise","Exception","VisitOrderExpression","orderContext","ExpressionType","OrderByDescending","VisitPagingExpression","Skip","amount","Take","VisitSimpleBinaryExpression","left","resolution","mapTo","resolvableType","requireType","right","Array","forEach","item","VisitEntityFieldExpression","VisitMemberInfoExpression","memberName","wasComplex","isComplex","complex","fieldData","dataType","memberDefinition","from","VisitConstantExpression","VisitQueryParameterExpression","expressionValueType","resolveType","Queryable","toTraceString","supportedDataTypes","indexOf","fieldConverter","toDb","resolveName","VisitParametricQueryExpression","ComplexTypeExpression","entityType","includes","_getComplexTypeIncludes","push","parameters","VisitEntitySetExpression","instance","VisitObjectLiteralExpression","members","member","ObjectLiteralExpression","mappingPrefix","fieldName","pop","mapping","to","join","selectType","VisitObjectFieldExpression","VisitEntityFieldOperationExpression","operation","MemberInfoExpression","opDef","opName","expressionInParameter","paramCounter","args","map","index","result","prefix","suffix","itemType","arg","funcContext","valueType","getTypeName","rigthValue","VisitComplexTypeExpression","VisitEntityExpression","_findComplexType","depth","memberDefinitions","getPublicMappedProperties","memDef","isAssignableTo","inc","4","YQLConverter","fromDb","$data.Byte","proxyConverter","$data.SByte","$data.Decimal","$data.Float","$data.Int16","$data.Int32","$data.Int64","$data.Number","parseInt","$data.Integer","parseFloat","$data.String","$data.Date","Date","$data.Boolean","$data.Blob","$data.Array","undefined","valueOf","5","StorageProviderBase","cfg","SqlCommands","extendedCreateNew","providerConfiguration","typeSystem","extend","YQLFormat","YQLQueryUrl","YQLEnv","initializeStore","callBack","PromiseHandlerBase","createCallbackSettings","success","AuthenticationProvider","enumerable","Integer","Number","String","Boolean","Blob","writable","supportedFieldOperations","contains","allowedIn","FilterExpression","startsWith","endsWith","supportedBinaryOperators","equal","notEqual","equalTyped","notEqualTyped","greaterThan","greaterThanOrEqual","lessThan","lessThenOrEqual","or","and","in","supportedUnaryOperators","supportedSetOperations","filter","toArray","single","take","skip","orderBy","orderByDescending","first","executeQuery","schema","defaultType","entitSetDefinition","getType","asArray","m","Authentication","Anonymous","_compile","error","requestData","encodeURIComponent","data","textStatus","jqXHR","resultData","_preProcessData","rawDataList","compiler","createModelBinderConfigCompiler","errorThrow","errorData","JSON","parse","responseText","prepareRequest","CreateRequest","jsonResult","entityDef","depths","skipFirstLevel","keys","Object","sqlText","createYQLCompiler","getTraceString","setContext","ctx","saveChanges","registerProvider","storageProviders","YQL","YQLProvider","6","defineProperty","_YQLConverter","_YQLProvider","_YQLCompiler","_geo","_YQLContext","./EntitySets/YQLContext.js","./EntitySets/geo.js","./YQLCompiler.js","./YQLConverter.js","./YQLProvider.js"],"mappings":";;;;;;;;;;;;;CAaA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,OAAA,eAAA,gBAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,MAAAV,MAAA,WAAA,MAAA,SAAAW,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAC,EAAAzB,EAAAD,GACA,YAMA,SAAS2B,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GCpBvF,GAAAG,GAAAL,EAAA,gBDkBIM,EAASL,EAAuBI,EChBpCC,GAAAA,WAAMC,MAAM/B,OAAO,yBAA0B8B,EAAAA,WAAME,cAAe,MAE9DC,YAAcC,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAIC,UAAWC,UAAW,kBAC9FC,UAAYR,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAII,OAAQF,UAAW,gBACzFG,WAAaV,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAIM,QAASJ,UAAW,iBAC3FK,WAAaZ,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAIQ,SAAUN,UAAW,iBAC5FO,QAAUd,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAIU,MAAOR,UAAW,cACtFS,QAAUhB,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAIY,MAAOV,UAAW,cACtFW,YAAclB,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAIc,UAAWZ,UAAW,kBAC9Fa,eAAiBpB,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAIgB,QAASd,UAAW,uBAC/Fe,cAAgBtB,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAIkB,OAAQhB,UAAW,qBAC7FiB,gBAAkBxB,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAIoB,SAAUlB,UAAW,wBACjGmB,cAAgB1B,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAIsB,OAAQpB,UAAW,qBAC7FqB,gBAAkB5B,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAIwB,SAAUtB,UAAW,uBACjGuB,gBAAkB9B,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAI0B,SAAUxB,UAAW,wBACjGyB,gBAAkBhC,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAI4B,SAAU1B,UAAW,wBACjG2B,MAAQlC,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAI8B,IAAK5B,UAAW,YAClF6B,QAAUpC,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAIgC,MAAO9B,UAAW,cACtF+B,kBAAoBtC,KAAMJ,EAAAA,WAAMK,UAAWC,YAAaN,EAAAA,WAAMO,MAAMC,MAAMC,IAAIkC,WAAYhC,UAAW,0BAErGiC,kBAAoBC,MAAO7C,EAAAA,WAAMO,MAAMC,MAAMC,IAAIqC,iBACjDC,aAAeF,MAAO7C,EAAAA,WAAMO,MAAMC,MAAMC,IAAIuC,YAC5CC,YAAcJ,MAAO7C,EAAAA,WAAMO,MAAMC,MAAMC,IAAIyC,WAC3CC,UAAYN,MAAO7C,EAAAA,WAAMO,MAAMC,MAAMC,IAAI2C,SACzCC,aAAeR,MAAO7C,EAAAA,WAAMO,MAAMC,MAAMC,IAAI6C,YAC5CC,WAAaV,MAAO7C,EAAAA,WAAMO,MAAMC,MAAMC,IAAI+C,UAC1CC,gBAAkBZ,MAAO7C,EAAAA,WAAMO,MAAMC,MAAMC,IAAIiD,eAG/CC,MACIC,iBAAiB,EACjBjD,UAAW,OACXkD,YAAa,QAAS,WACtBC,sBAAsB,EACtB1D,KAAMJ,EAAAA,WAAMK,UACZC,YAAaN,EAAAA,WAAMC,MAAM/B,OAAO,4BAA6B8B,EAAAA,WAAM+D,OAAQ,MACvEC,KAAO5D,KAAM,SAAU6D,UAAU,EAAMC,YAAY,IACpD,OAEPC,KACIP,iBAAiB,EACjBjD,UAAW,MACXkD,YAAa,QAAS,WACtBC,sBAAsB,EACtB1D,KAAMJ,EAAAA,WAAMK,UACZC,YAAaN,EAAAA,WAAMC,MAAM/B,OAAO,2BAA4B8B,EAAAA,WAAM+D,OAAQ,MACtEC,KAAO5D,KAAM,SAAU6D,UAAU,EAAMC,YAAY,GACnDE,SAAWhE,KAAM,SAAU8D,YAAY,GACvCG,SAAWjE,KAAM,SAAU8D,YAAY,IACxC,OAEPI,SACIV,iBAAiB,EACjBjD,UAAW,WACXkD,YAAa,QAAS,WACtBC,sBAAsB,EACtB1D,KAAMJ,EAAAA,WAAMK,UACZC,YAAaN,EAAAA,WAAMC,MAAM/B,OAAO,+BAAgC8B,EAAAA,WAAM+D,OAAQ,MAC1EC,KAAO5D,KAAM,SAAU6D,UAAU,EAAMC,YAAY,IACpD,OAEPK,MACIX,iBAAiB,EACjBjD,UAAW,OACXkD,YAAa,QAAS,WACtBC,sBAAsB,EACtB1D,KAAMJ,EAAAA,WAAMK,UACZC,YAAaN,EAAAA,WAAMC,MAAM/B,OAAO,4BAA6B8B,EAAAA,WAAM+D,OAAQ,MACvEC,KAAO5D,KAAM,SAAU6D,UAAU,EAAMC,YAAY,IACpD,OAEPM,gBACIZ,iBAAiB,EACjBjD,UAAW,iBACXkD,YAAa,QAAS,WACtBC,sBAAsB,EACtB1D,KAAMJ,EAAAA,WAAMK,UACZC,YAAaN,EAAAA,WAAMC,MAAM/B,OAAO,sCAAuC8B,EAAAA,WAAM+D,OAAQ,MACjFC,KAAO5D,KAAM,SAAU6D,UAAU,EAAMC,YAAY,GACnDO,QAAUrE,KAAM,SAAU8D,YAAY,GACtCQ,WAAatE,KAAM,SAAU8D,YAAY,GACzCS,YAAcvE,KAAM,SAAU8D,YAAY,GAC1CU,SAAWxE,KAAM,SAAU8D,YAAY,IACxC,OAEPW,MACIjB,iBAAiB,EACjBjD,UAAW,OACXkD,YAAa,QAAS,WACtBC,sBAAsB,EACtB1D,KAAMJ,EAAAA,WAAMK,UACZC,YAAaN,EAAAA,WAAMC,MAAM/B,OAAO,4BAA6B8B,EAAAA,WAAM+D,OAAQ,MACvEC,KAAO5D,KAAM,SAAU6D,UAAU,EAAMC,YAAY,GACnDE,SAAWhE,KAAM,SAAU8D,YAAY,GACvCY,SAAW1E,KAAM,OAAQ8D,YAAY,GACrCa,OAAS3E,KAAM,SAAU8D,YAAY,GACrCc,QAAU5E,KAAM,SAAU8D,YAAY,EAAMe,YAAa,kDACzDC,QAAU9E,KAAM,SAAU8D,YAAY,IACvC,OAEPiB,MACIvB,iBAAiB,EACjBjD,UAAW,OACXkD,YAAa,QAAS,WACtBC,sBAAsB,EACtB1D,KAAMJ,EAAAA,WAAMK,UACZC,YAAaN,EAAAA,WAAMC,MAAM/B,OAAO,4BAA6B8B,EAAAA,WAAM+D,OAAQ,MACvEC,KAAO5D,KAAM,SAAU6D,UAAU,EAAMC,YAAY,GACnDkB,UAAYhF,KAAM,SAAU8D,YAAY,IACzC,OAEPmB,KACIzB,iBAAiB,EACjBjD,UAAW,MACXkD,YAAa,QAAS,WACtBC,sBAAsB,EACtB1D,KAAMJ,EAAAA,WAAMK,UACZC,YAAaN,EAAAA,WAAMC,MAAM/B,OAAO,2BAA4B8B,EAAAA,WAAM+D,OAAQ,MACtEC,KAAO5D,KAAM,SAAU6D,UAAU,EAAMC,YAAY,GACnDoB,MAAQlF,KAAM,aACdmF,OAASnF,KAAM,UACf6E,aAAe7E,KAAM,UACrBoF,MAAQpF,KAAM,UACdqF,SAAWrF,KAAM,WAClB,OAEPsF,WACItF,KAAMJ,EAAAA,WAAMC,MAAM/B,OAAO,YAAa8B,EAAAA,WAAM+D,OAAQ,MAChD4B,aAAevF,KAAM,UACrBwF,SAAWxF,KAAM,WAClB,OAEPyF,KACIjC,iBAAiB,EACjBjD,UAAW,MACXkD,YAAa,QAAS,WACtBC,sBAAsB,EACtB1D,KAAMJ,EAAAA,WAAMK,UACZC,YAAaN,EAAAA,WAAMC,MAAM/B,OAAO,2BAA4B8B,EAAAA,WAAM+D,OAAQ,MACtEC,KAAO5D,KAAM,SAAU6D,UAAU,EAAMC,YAAY,GACnDkB,UAAYhF,KAAM,SAAU8D,YAAY,IACzC,OAEP4B,MACIlC,iBAAiB,EACjBjD,UAAW,OACXkD,YAAa,QAAS,WACtBC,sBAAsB,EACtB1D,KAAMJ,EAAAA,WAAMK,UACZC,YAAaN,EAAAA,WAAMC,MAAM/B,OAAO,4BAA6B8B,EAAAA,WAAM+D,OAAQ,MACvEC,KAAO5D,KAAM,SAAU8D,YAAY,GACnC6B,KAAO3F,KAAM,SAAU8D,YAAY,GACnC8B,YAAc5F,KAAM,SAAU8D,YAAY,GAC1C+B,mBAAqB7F,KAAM,SAAU8D,YAAY,GACjDgC,gBAAkB9F,KAAM,SAAU8D,YAAY,IAC/C,QAGR,QDsBAiC,eAAe,iBAAiBC,GAAG,SAAS1G,EAAQzB,EAAOD,GAC9D,YAMA,SAAS2B,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GE7LvF,GAAAG,GAAAL,EAAA,gBF2LIM,EAASL,EAAuBI,EEzLpCC,GAAAA,WAAMC,MAAM/B,OAAO,wCAAyC8B,EAAAA,WAAM+D,OAAQ,MACtE1E,MAAQe,KAAM,UACdwF,SAAWxF,KAAM,WAClB,MAEHJ,EAAAA,WAAMC,MAAM/B,OAAO,kCAAmC8B,EAAAA,WAAM+D,OAAQ,MAChE1E,MAAQe,KAAM,UACdA,MAAQA,KAAM,UACdwF,SAAWxF,KAAM,WAClB,MAEHJ,EAAAA,WAAMC,MAAM/B,OAAO,gCAAiC8B,EAAAA,WAAM+D,OAAQ,MAC9D1E,MAAQe,KAAM,UACdA,MAAQA,KAAM,UACdwF,SAAWxF,KAAM,WAClB,MAEHJ,EAAAA,WAAMC,MAAM/B,OAAO,mCAAoC8B,EAAAA,WAAM+D,OAAQ,MACjE1E,MAAQe,KAAM,UACdwF,SAAWxF,KAAM,WAClB,MAEHJ,EAAAA,WAAMC,MAAM/B,OAAO,mCAAoC8B,EAAAA,WAAM+D,OAAQ,MACjEsC,UAAYjG,KAAM,UAClBkG,WAAalG,KAAM,WACpB,MAEHJ,EAAAA,WAAMC,MAAM/B,OAAO,iCAAkC8B,EAAAA,WAAM+D,OAAQ,MAC/D3D,MAAQA,KAAM,UACdwF,SAAWxF,KAAM,WAClB,MAEHJ,EAAAA,WAAMC,MAAM/B,OAAO,sCAAuC8B,EAAAA,WAAM+D,OAAQ,MACpEwC,WAAanG,KAAM,eACnBoG,WAAapG,KAAM,gBACpB,MAEHJ,EAAAA,WAAMC,MAAM/B,OAAO,kCAAmC,KAAM,MACxDuI,OAASrG,KAAM,MAAOsG,KAAK,GAC3BC,MAAQvG,KAAM,UACdwG,KAAOxG,KAAM,UACbyG,eAAiBzG,KAAM,oBACvB0G,MAAQ1G,KAAM,WACf,MAEHJ,EAAAA,WAAMC,MAAM8G,SAAS,wCAA0C3G,KAAM,OAAUA,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAIuG,YAAc,MACrHjG,SAAWX,KAAM,cACjB6G,QAAU7G,KAAM,YAChB8G,QAAU9G,KAAM,YAChB+G,QAAU/G,KAAM,YAChBgH,WAAahH,KAAM,eACnBiH,WAAajH,KAAM,eACnBkH,QAAUlH,KAAM,aAChBmH,UAAYnH,KAAM,eAClBoH,aAAepH,KAAM,kBACrBqH,UAAYrH,KAAM,OAClBsH,SAAWtH,KAAM,QAClB,MAGHJ,EAAAA,WAAMC,MAAM/B,OAAO,kCAAmC8B,EAAAA,WAAM+D,OAAQ,MAChE4D,sBAAwBvH,KAAM,UAC9BwG,KAAOxG,KAAM,SAAUsG,KAAK,GAC5BG,eAAiBzG,KAAM,oBACvB0G,MAAQ1G,KAAM,WACf,MAEHJ,EAAAA,WAAMC,MAAM8G,SAAS,kCAAoC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAImH,gBAAkB,MAC3HC,eAAiBzH,KAAM,WACxB,MAEHJ,EAAAA,WAAMC,MAAM8G,SAAS,iCAAmC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAImH,gBAAkB,MAC1HE,aAAe1H,KAAM,WACtB,MAEHJ,EAAAA,WAAMC,MAAM8G,SAAS,mCAAqC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAImH,gBAAkB,MAC5HG,gBAAkB3H,KAAM,WACzB,MAEHJ,EAAAA,WAAMC,MAAM8G,SAAS,iCAAmC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAImH,gBAAkB,MAC1HI,QAAU5H,KAAM,UAChB6H,QAAU7H,KAAM,UAChB8H,QAAU9H,KAAM,UAChB+H,QAAU/H,KAAM,UAChBgI,QAAUhI,KAAM,UAChBiI,QAAUjI,KAAM,UAChBkI,QAAUlI,KAAM,UAChBmI,QAAUnI,KAAM,UAChBoI,QAAUpI,KAAM,WACjB,MAEHJ,EAAAA,WAAMC,MAAM8G,SAAS,mCAAqC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAImH,gBAAkB,MAC5Ha,cAAgBrI,KAAM,UACtBmB,WAAanB,KAAM,WACpB,MAEHJ,EAAAA,WAAMC,MAAM8G,SAAS,mCAAqC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAImH,gBAAkB,MAC5Hc,cAAgBtI,KAAM,UACtBmB,WAAanB,KAAM,WACpB,MAEHJ,EAAAA,WAAMC,MAAM8G,SAAS,mCAAqC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAImH,gBAAkB,MAC5He,kBAAoBvI,KAAM,WAC3B,MAEHJ,EAAAA,WAAMC,MAAM8G,SAAS,gCAAkC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAImH,gBAAkB,MACzHgB,MAAQxI,KAAM,UACdyI,OAASzI,KAAM,UACfmB,WAAanB,KAAM,WACpB,MAEHJ,EAAAA,WAAMC,MAAM8G,SAAS,iCAAmC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAIuG,YAAc,MACtH3F,OAASjB,KAAM,WAChB,MACHJ,EAAAA,WAAMC,MAAM8G,SAAS,kCAAoC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAIuG,YAAc,MACvH3F,OAASjB,KAAM,WAChB,MACHJ,EAAAA,WAAMC,MAAM8G,SAAS,mCAAqC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAIuG,YAAc,MACxH3F,OAASjB,KAAM,WAChB,MACHJ,EAAAA,WAAMC,MAAM8G,SAAS,8BAAgC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAIuG,YAAc,MACnH3F,OAASjB,KAAM,WAChB,MACHJ,EAAAA,WAAMC,MAAM8G,SAAS,gCAAkC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAIuG,YAAc,MACrH3F,OAASjB,KAAM,WAChB,MACHJ,EAAAA,WAAMC,MAAM8G,SAAS,oCAAsC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAIuG,YAAc,MACzH3F,OAASjB,KAAM,UACf0I,MAAQ1I,KAAM,WACf,MACHJ,EAAAA,WAAMC,MAAM8G,SAAS,gCAAkC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAIuG,YAAc,MACrH3F,OAASjB,KAAM,UACf0I,MAAQ1I,KAAM,WACf,MACHJ,EAAAA,WAAMC,MAAM8G,SAAS,qCAAuC3G,KAAMJ,EAAAA,WAAM+D,SAAY3D,KAAMJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAIuG,YAAc,MAC1H+B,gBAAkB3I,KAAM,UACxBmB,WAAanB,KAAM,UACnB4I,QAAU5I,KAAM,UAChB0I,MAAQ1I,KAAM,WACf,MAEHL,EAAAkJ,UAAUC,aAAa,mBAAoBlJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAIqC,iBACjE/C,EAAAkJ,UAAUC,aAAa,cAAelJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAIuC,YAC5DjD,EAAAkJ,UAAUC,aAAa,aAAclJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAIyC,WAC3DnD,EAAAkJ,UAAUC,aAAa,WAAYlJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAI2C,SACzDrD,EAAAkJ,UAAUC,aAAa,cAAelJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAI6C,YAC5DvD,EAAAkJ,UAAUC,aAAa,YAAalJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAI+C,UAC1DzD,EAAAkJ,UAAUC,aAAa,iBAAkBlJ,EAAAA,WAAMO,MAAMC,MAAMC,IAAIiD,iBF8L5DyC,eAAe,iBAAiBgD,GAAG,SAASzJ,EAAQzB,EAAOD,GAC9D,YAMA,SAAS2B,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GG1VvF,GAAAG,GAAAL,EAAA,gBHwVIM,EAASL,EAAuBI,IGpVpC,EAAAA,EAAAqJ,IAAG,yCAA0CpJ,EAAAA,WAAMqJ,YAAYC,wBAAyB,MACpFC,YAAa,WACT/K,KAAKgL,YACLhL,KAAKiL,eAGTC,QAAS,SAAUC,GACfnL,KAAKgL,SAAWG,EAAMC,QAAQC,eAE9B,IAAID,IACAE,WAAaC,IAAK,IAClBC,eAAiBD,IAAK,IACtBE,UAAYF,IAAK,IACjBG,SAAWH,IAAK,IAChBI,SAAWJ,IAAK,IAChBpJ,UAAW,GAWf,IATAnC,KAAK4L,MAAMT,EAAMU,WAAYT,GAEI,IAA7BA,EAAQI,cAAcD,MACtBH,EAAQI,cAAcD,IAAM,YAE5BH,EAAQK,SAASF,MACjBH,EAAQK,SAASF,IAAM,WAAaH,EAAQK,SAASF,IAAM,KAG3DH,EAAQM,QAAQrH,OAAS+G,EAAQO,QAAQtH,MAAO,CAChD,GAAIyH,GAAUV,EAAQM,QAAQrH,KAC9B+G,GAAQM,QAAQrH,MAAQ+G,EAAQO,QAAQtH,MACxC+G,EAAQO,QAAQtH,MAAQ+G,EAAQO,QAAQtH,MAAQyH,EAKpD,MAHIV,GAAQM,QAAQrH,QAAO+G,EAAQM,QAAQH,IAAMH,EAAQM,QAAQK,OAASX,EAAQM,QAAQrH,MAAQ+G,EAAQM,QAAQM,QAC9GZ,EAAQO,QAAQtH,QAAO+G,EAAQO,QAAQJ,IAAMH,EAAQO,QAAQI,OAASX,EAAQO,QAAQtH,MAAQ+G,EAAQO,QAAQK,SAG9GC,UAAWb,EAAQI,cAAcD,IAAM,SAAWH,EAAQjJ,UACtDiJ,EAAQE,UAAUC,IAClBH,EAAQK,SAASF,IACjBH,EAAQO,QAAQJ,KACfH,EAAQO,QAAQJ,IAAMH,EAAQM,QAAQH,IAAM,IACjDW,cAAed,EAAQI,cAAcW,aACrCC,YAKRC,sBAAuB,SAAUR,EAAYT,GAEzCpL,KAAK4L,MAAMC,EAAWS,OAAQlB,GAE9BA,EAAQE,UAAU1J,KAAOiK,EAAWU,SACP,IAAzBnB,EAAQE,UAAUC,IAClBH,EAAQE,UAAUC,IAAM,UAExBH,EAAQE,UAAUC,KAAO,QAE7BvL,KAAK4L,MAAMC,EAAWW,SAAUpB,EAAQE,YAE5CmB,0BAA2B,SAAUZ,EAAYT,GAE7CpL,KAAK4L,MAAMC,EAAWS,OAAQlB,GAE9BA,EAAQI,cAAc5J,KAAOiK,EAAWU,SACP,IAA7BnB,EAAQI,cAAcD,IACtBH,EAAQI,cAAcD,IAAM,UAE5BhK,EAAAmL,MAAMC,MAAM,GAAApL,GAAAqL,UAAc,0BAE9B5M,KAAK4L,MAAMC,EAAWW,SAAUpB,EAAQI,gBAE5CqB,qBAAsB,SAAUhB,EAAYT,GAExCpL,KAAK4L,MAAMC,EAAWS,OAAQlB,GAE9BA,EAAQK,SAAS7J,KAAOiK,EAAWU,QAEnC,IAAIO,IAAiBvB,IAAK,GAC1BvL,MAAK4L,MAAMC,EAAWW,SAAUM,GAChC1B,EAAQK,SAASF,IAAM,UAAYuB,EAAavB,IAAM,mBAAqBM,EAAWU,UAAY/K,EAAAA,WAAMqJ,YAAYkC,eAAeC,mBAAqB,KAC3H,IAAxB5B,EAAQK,SAASF,IAAa,KAAOH,EAAQK,SAASF,IAAO,KAEtE0B,sBAAuB,SAAUpB,EAAYT,GAEzCpL,KAAK4L,MAAMC,EAAWS,OAAQlB,GAE1BS,EAAWU,UAAY/K,EAAAA,WAAMqJ,YAAYkC,eAAeG,MACxD9B,EAAQM,QAAQ9J,KAAOiK,EAAWU,SAClCnB,EAAQM,QAAQK,OAAS,iBACzB/L,KAAK4L,MAAMC,EAAWsB,OAAQ/B,EAAQM,SACtCN,EAAQM,QAAQM,OAAS,KAEpBH,EAAWU,UAAY/K,EAAAA,WAAMqJ,YAAYkC,eAAeK,OAC7DhC,EAAQO,QAAQ/J,KAAOiK,EAAWU,SAClCnB,EAAQO,QAAQI,OAAS,qBACzB/L,KAAK4L,MAAMC,EAAWsB,OAAQ/B,EAAQO,SACtCP,EAAQO,QAAQK,OAAS,MAIjCqB,4BAA6B,SAAUxB,EAAYT,GAC/CA,EAAQG,KAAO,GACJvL,MAAK4L,MAAMC,EAAWyB,KAAMlC,EAQvC,IAPAA,EAAQG,KAAOM,EAAW0B,WAAWC,MAEjC3B,EAAW0B,WAAWE,iBACrBlM,EAAAmL,MAAMgB,YAAY7B,EAAW0B,WAAWC,MAAQ,0BAA2B3B,EAAW8B,MAAMtJ,MAAOwH,EAAW0B,WAAWE,iBACtHlM,EAAAmL,MAAMC,MAAM,GAAApL,GAAAqL,UAAcf,EAAW8B,MAAM/L,KAAO,oBAAsBiK,EAAW0B,WAAWC,MAAQ,cAAe,sBAG1F,OAA/B3B,EAAW0B,WAAWpF,MAAiB0D,EAAW8B,MAAMtJ,gBAAiBuJ,OAAO,CAChF,GAAI7N,GAAOC,IACXoL,GAAQG,KAAO,IACfM,EAAW8B,MAAMtJ,MAAMwJ,QAAQ,SAAUC,EAAMnN,GACvCA,EAAI,IAAGyK,EAAQG,KAAO,MAC1BxL,EAAK6L,MAAMkC,EAAM1C,KAErBA,EAAQG,KAAO,QAEf,CAAYvL,KAAK4L,MAAMC,EAAW8B,MAAOvC,GAE7CA,EAAQG,KAAO,KAGnBwC,2BAA4B,SAAUlC,EAAYT,GAC9CpL,KAAK4L,MAAMC,EAAWS,OAAQlB,GAC9BpL,KAAK4L,MAAMC,EAAWW,SAAUpB,IAEpC4C,0BAA2B,SAAUnC,EAAYT,GAC7C,GAAI6C,EACA7C,GAAQ8C,cAAe,IACvB9C,EAAQG,KAAO,KACnBH,EAAQG,KAAOM,EAAWoC,WAED,GAArB7C,EAAQ+C,WACR/C,EAAQgD,SAAWvC,EAAWoC,WAC9B7C,EAAQ8C,YAAa,IAGrB9C,EAAQ8C,YAAa,EAEjBD,EADA7C,EAAQgD,QACKhD,EAAQgD,QAAUvC,EAAWoC,WAE7BpC,EAAWoC,WAE5B7C,EAAQgD,QAAU,KAGlBhD,EAAQiD,WAAclG,KAAM8F,EAAYK,SAAUzC,EAAW0C,iBAAiBD,UAE1D,cAAhBlD,EAAQxJ,MAAyBwJ,EAAQe,eACzCf,EAAQe,eAAkBqC,KAAMP,EAAYK,SAAUzC,EAAW0C,iBAAiBD,cAI9FG,wBAAyB,SAAU5C,EAAYT,GACvB,cAAhBA,EAAQxJ,MACRL,EAAAmL,MAAMC,MAAM,GAAApL,GAAAqL,UAAc,iDAAkD,mBAEhF5M,KAAK0O,8BAA8B7C,EAAYT,IAGnDsD,8BAA+B,SAAU7C,EAAYT,GACjDA,EAAQ/G,MAAQwH,EAAWxH,KAC3B,IAAIsK,GAAsBpN,EAAAkJ,UAAUmE,YAAY/C,EAAWjK,KACvDiK,GAAWxH,gBAAiB7C,GAAAA,WAAMqN,UAClCzD,EAAQG,KAAO,IAAMM,EAAWxH,MAAMyK,gBAAgB7C,UAAY,IACM,IAAjEjM,KAAKgL,SAAS+D,mBAAmBC,QAAQL,GAChDvD,EAAQG,KAAOvL,KAAKgL,SAASiE,eAAeC,KAAK3N,EAAAkJ,UAAU0E,YAAYR,IAAsB9C,EAAWxH,OAExG+G,EAAQG,KAAO,GAAKM,EAAWxH,OAIvC+K,+BAAgC,SAAUvD,EAAYT,GAClD,GAAoB,cAAhBA,EAAQxJ,MAER,GADA5B,KAAK4L,MAAMC,EAAWA,WAAYT,GAC9BS,EAAWA,qBAAsBrK,GAAAA,WAAMqJ,YAAYwE,sBAAuB,CAC1EjE,EAAQe,aAAef,EAAQe,gBAC/B,IAAIvK,GAAOiK,EAAWA,WAAWyD,WAC7BC,EAAWvP,KAAKwP,wBAAwB5N,EAC5CwJ,GAAQe,aAAasD,MAAOjB,KAAMpD,EAAQgD,QAASxM,KAAMA,EAAM2N,SAAUA,SAG1E,CAEOvP,KAAK4L,MAAMC,EAAWA,WAAYT,EAC5CA,GAAQsE,WAAa7D,EAAW6D,aAIxCC,yBAA0B,SAAU9D,EAAYT,GACxCA,EAAQxJ,KACHwJ,EAAQgD,UACThD,EAAQgD,QAAU,IAGtBhD,EAAQjJ,UAAY0J,EAAW+D,SAASzN,WAKhD0N,6BAA8B,SAAUhE,EAAYT,GAChD,GAAIrL,GAAOC,IACXoL,GAAQe,aAAef,EAAQe,iBAC/BN,EAAWiE,QAAQjC,QAAQ,SAAUkC,GACjC,GAAIA,EAAOlE,qBAAsBrK,GAAAA,WAAMqJ,YAAYmF,wBAC/C5E,EAAQ6E,cAAgB7E,EAAQ6E,kBAChC7E,EAAQ6E,cAAcR,KAAKM,EAAOG,WAClCnQ,EAAK6L,MAAMmE,EAAQ3E,GACnBA,EAAQ6E,cAAcE,UAErB,CACG/E,EAAQe,aAAanL,OAAS,IAC9BoK,EAAQG,KAAO,MACnBxL,EAAK6L,MAAMmE,EAAQ3E,EAEnB,IAAIgF,IAAY5B,KAAMpD,EAAQiD,UAAUlG,KAAMkI,GAAKjF,EAAQ6E,wBAAyBrC,OAAQxC,EAAQ6E,cAAcK,KAAK,KAAO,IAAMP,EAAOG,UAAYH,EAAOG,UAC9J,IAAI9E,EAAQmF,WAAY,CACpBH,EAAQxO,KAAOwJ,EAAQmF,UACvB,IAAIhB,GAAWvP,KAAKwP,wBAAwBpE,EAAQmF,WACpDH,GAAQb,SAAWA,MAEnBa,GAAQ9B,SAAWlD,EAAQiD,UAAUC,QAEzClD,GAAQe,aAAasD,KAAKW,SAEnBhF,GAAQiD,gBACRjD,GAAQmF,aAEpBvQ,OAEPwQ,2BAA4B,SAAU3E,EAAYT,GAC9CpL,KAAK4L,MAAMC,EAAWA,WAAYT,GAC9BS,EAAWA,qBAAsBrK,GAAAA,WAAMqJ,YAAYwE,wBACnDjE,EAAQiD,UAAYjD,EAAQiD,cAC5BjD,EAAQiD,UAAUlG,KAAOiD,EAAQgD,QACjChD,EAAQmF,WAAa1E,EAAWA,WAAWyD,aAGnDmB,oCAAqC,SAAU5E,EAAYT,GACvD7J,EAAAmL,MAAMgB,YAAY,uBAAwB7B,EAAW6E,UAAWlP,EAAAA,WAAMqJ,YAAY8F,qBAElF,IAAIC,GAAQ/E,EAAW6E,UAAUnC,iBAC7BsC,EAASD,EAAMpD,OAASoD,EAAMzI,IAElCiD,GAAQG,KAAO,IAEoB,GAA/BqF,EAAME,uBACN9Q,KAAK4L,MAAMC,EAAWS,OAAQlB,GAElCA,EAAQG,KAAOsF,CACf,IAAIE,GAAe,EACf3E,EAASwE,EAAMlB,eAEfsB,EAAO5E,EAAO6E,IAAI,SAAUnD,EAAMoD,GAClC,GAAIC,IAAW7C,SAAUR,EAAKQ,SAAU8C,OAAQtD,EAAKsD,OAAQC,OAAQvD,EAAKuD,OAS1E,OARIvD,GAAKzJ,MACL8M,EAAO9M,MAAQyJ,EAAKzJ,MACC,gBAAdyJ,EAAK3F,KACZgJ,EAAO9M,MAAQwH,EAAWS,QAE1B6E,EAAO9M,MAAQwH,EAAW6D,WAAWqB,GACrCI,EAAOG,SAAWzF,EAAW6D,WAAWqB,KAAgBnP,MAErDuP,GAGXH,GAAKnD,QAAQ,SAAU0D,EAAKL,GACxB,GAAII,GAAWC,EAAID,SAAW/P,EAAAkJ,UAAUmE,YAAY2C,EAAID,UAAY,IACpE,KAAKA,GAAcC,EAAIjD,mBAAoBV,QAA2C,IAAlC2D,EAAIjD,SAASU,QAAQsC,IAAoBC,EAAIjD,UAAYgD,EAAW,CAChHJ,EAAQ,IACR9F,EAAQG,KAAO,KAEnB,IAAIiG,IAAgBjG,IAAK,GAGzB,IAFAvL,KAAK4L,MAAM2F,EAAIlN,MAAOmN,GAER,UAAVX,EAAoB,CACpB,GAAIY,GAAYlQ,EAAAkJ,UAAUiH,YAAYF,EAAYnN,MAClD+G,GAAQG,KAAoB,UAAbkG,EAAwB,IAAM,GAC7CrG,EAAQG,MAAQgG,EAAIH,OAASG,EAAIH,OAAS,IAAMI,EAAYnN,OAASkN,EAAIF,OAASE,EAAIF,OAAS,IAC/FjG,EAAQG,KAAoB,UAAbkG,EAAwB,IAAM,OAE7CrG,GAAQG,KAAOiG,EAAYjG,QAI/BhK,GAAAmL,MAAMC,MAAM,GAAApL,GAAAqL,UAAc0E,EAAW,oBAAsBzF,EAAW6E,UAAUzC,WAAa,cAAe,uBACjHjO,MAEC4Q,EAAMe,WAAYvG,EAAQG,KAAOqF,EAAMe,WACtCvG,EAAQG,KAAO,GAEpBH,EAAQG,KAAO,KAGnBqG,2BAA4B,SAAU/F,EAAYT,GAC9CpL,KAAK4L,MAAMC,EAAWS,OAAQlB,GAE9BA,EAAQ+C,WAAY,EACpBnO,KAAK4L,MAAMC,EAAWW,SAAUpB,GAChCA,EAAQ+C,WAAY,EAEG,IAAnB/C,EAAQgD,UACRhD,EAAQgD,SAAW,MAI3ByD,sBAAuB,SAAUhG,EAAYT,GACzCpL,KAAK4L,MAAMC,EAAWS,OAAQlB,IAGlC0G,iBAAkB,SAAUlQ,EAAMuP,EAAQY,GACtCnQ,EAAKoQ,kBAAkBC,4BAA4BpE,QAAQ,SAAUqE,GACjE,GAAI5D,GAAW/M,EAAAkJ,UAAUmE,YAAYsD,EAAO5D,SAC5C,IAAIA,EAAS6D,iBAAmB7D,EAAS6D,eAAe3Q,EAAAA,WAAMK,WAAY,CACtE,GAAIsG,GAAQ4J,EAAQA,EAAQ,IAAMG,EAAO/J,KAAO+J,EAAO/J,IACvDgJ,GAAO1B,MAAOtH,KAAMA,EAAMvG,KAAM0M,IAChCtO,KAAK8R,iBAAiBxD,EAAU6C,EAAQhJ,KAE7CnI,OAEPwP,wBAAyB,SAAU5N,GAC/B,IAAK5B,KAAKiL,WAAWrJ,EAAKuG,MAAO,CAC7B,GAAIiK,KACJpS,MAAK8R,iBAAiBlQ,EAAMwQ,GAC5BpS,KAAKiL,WAAWrJ,EAAKuG,MAAQiK,EAEjC,MAAOpS,MAAKiL,WAAWrJ,EAAKuG,QAGjC,QHuTAR,eAAe,iBAAiB0K,GAAG,SAASnR,EAAQzB,EAAOD,GAC9D,YAMA,SAAS2B,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GI5oBvF,GAAAG,GAAAL,EAAA,gBJ0oBIM,EAASL,EAAuBI,EIxoBpCC,GAAAA,WAAM8Q,cACFC,QACIC,aAAchR,EAAAA,WAAMiJ,UAAUgI,eAC9BC,cAAelR,EAAAA,WAAMiJ,UAAUgI,eAC/BE,gBAAiBnR,EAAAA,WAAMiJ,UAAUgI,eACjCG,cAAepR,EAAAA,WAAMiJ,UAAUgI,eAC/BI,cAAerR,EAAAA,WAAMiJ,UAAUgI,eAC/BK,cAAetR,EAAAA,WAAMiJ,UAAUgI,eAC/BM,cAAevR,EAAAA,WAAMiJ,UAAUgI,eAC/BO,eAAgB,SAAU3O,GAAS,MAAwB,gBAAVA,GAAqBA,EAAQ4O,SAAS5O,IACvF6O,gBAAiB,SAAU7O,GAAS,MAAwB,gBAAVA,GAAqBA,EAAQ8O,WAAW9O,IAC1F+O,eAAgB5R,EAAAA,WAAMiJ,UAAUgI,eAChCY,aAAc,SAAUhP,GAAS,MAAO,IAAIiP,MAAsB,gBAAVjP,GAAqB4O,SAAS5O,GAASA,IAC/FkP,gBAAiB,SAAUlP,GAAS,QAASA,GAC7CmP,aAAchS,EAAAA,WAAMiJ,UAAUgI,eAC9BgB,cAAe,SAAUpP,GAAS,MAAcqP,UAAVrP,EAA8B,GAAI7C,GAAAA,WAAMoM,MAAkBvJ,IAEpG6K,MACIsD,aAAchR,EAAAA,WAAMiJ,UAAUgI,eAC9BC,cAAelR,EAAAA,WAAMiJ,UAAUgI,eAC/BE,gBAAiBnR,EAAAA,WAAMiJ,UAAUgI,eACjCG,cAAepR,EAAAA,WAAMiJ,UAAUgI,eAC/BI,cAAerR,EAAAA,WAAMiJ,UAAUgI,eAC/BK,cAAetR,EAAAA,WAAMiJ,UAAUgI,eAC/BM,cAAevR,EAAAA,WAAMiJ,UAAUgI,eAC/BO,eAAgBxR,EAAAA,WAAMiJ,UAAUgI,eAChCS,gBAAiB1R,EAAAA,WAAMiJ,UAAUgI,eACjCW,eAAgB,SAAU/O,GAAS,MAAO,IAAMA,EAAQ,KACxDgP,aAAc,SAAUhP,GAAS,MAAOA,GAAQA,EAAMsP,UAAY,MAClEJ,gBAAiB/R,EAAAA,WAAMiJ,UAAUgI,eACjCe,aAAchS,EAAAA,WAAMiJ,UAAUgI,eAC9BgB,cAAe,SAAUpP,GAAS,MAAO,IAAMA,EAAMiM,KAAK,MAAQ,SJkqBvE3I,eAAe,iBAAiBiM,GAAG,SAAS1S,EAAQzB,EAAOD,GAC9D,YAMA,SAAS2B,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GK1sBvF,GAAAG,GAAAL,EAAA,gBLwsBIM,EAASL,EAAuBI,EKtsBpCC,GAAAA,WAAMC,MAAM/B,OAAO,yCAA0C8B,EAAAA,WAAMqS,oBAAqB,MAEpF9I,YAAa,SAAU+I,GAEnB9T,KAAK+T,eACL/T,KAAKoL,WACLpL,KAAKgU,qBACLhU,KAAKiU,sBAAwBzS,EAAAA,WAAM0S,WAAWC,QAC1CC,UAAW,cACXC,YAAa,8CACbC,OAAQ,GACRjP,YAAa,QAAS,WACtBC,sBAAsB,GACvBwO,GACH9T,KAAKuU,gBAAkB,SAAUC,GAC7BA,EAAWhT,EAAAA,WAAMiT,mBAAmBC,uBAAuBF,GAC3DA,EAASG,QAAQ3U,KAAKoL,WAI9BwJ,wBAA0BtG,SAAU,0CAA2CuG,YAAY,GAC3F9F,oBAAsB1K,OAAQ7C,EAAAA,WAAMsT,QAAStT,EAAAA,WAAMuT,OAAQvT,EAAAA,WAAM8R,KAAM9R,EAAAA,WAAMwT,OAAQxT,EAAAA,WAAMyT,QAASzT,EAAAA,WAAM0T,KAAM1T,EAAAA,WAAMoM,OAAQuH,UAAU,GACxIC,0BACI/Q,OACIgR,UACI/G,SAAU9M,EAAAA,WAAMwT,OAChBM,UAAW9T,EAAAA,WAAMqJ,YAAY0K,iBAC7B/H,MAAO,SACPsD,uBAAuB,EACvBpB,aAAevH,KAAM,cAAemG,SAAU9M,EAAAA,WAAMwT,OAAQ5D,OAAQ,IAAKC,OAAQ,OAErFmE,YACIlH,SAAU9M,EAAAA,WAAMwT,OAChBM,UAAW9T,EAAAA,WAAMqJ,YAAY0K,iBAC7B/H,MAAO,SACPsD,uBAAuB,EACvBpB,aAAevH,KAAM,cAAemG,SAAU9M,EAAAA,WAAMwT,OAAQ3D,OAAQ,OAExEoE,UACInH,SAAU9M,EAAAA,WAAMwT,OAChBM,UAAW9T,EAAAA,WAAMqJ,YAAY0K,iBAC7B/H,MAAO,SACPsD,uBAAuB,EACvBpB,aAAevH,KAAM,cAAemG,SAAU9M,EAAAA,WAAMwT,OAAQ5D,OAAQ,QAG5EyD,YAAY,EACZM,UAAU,GAEdO,0BACIrR,OACIsR,OAASnI,MAAO,MAAOc,SAAU9M,EAAAA,WAAMyT,QAASK,UAAW9T,EAAAA,WAAMqJ,YAAY0K,kBAC7EK,UAAYpI,MAAO,OAAQc,SAAU9M,EAAAA,WAAMyT,QAASK,UAAW9T,EAAAA,WAAMqJ,YAAY0K,kBACjFM,YAAcrI,MAAO,MAAOc,SAAU9M,EAAAA,WAAMyT,QAASK,UAAW9T,EAAAA,WAAMqJ,YAAY0K,kBAClFO,eAAiBtI,MAAO,OAAQc,SAAU9M,EAAAA,WAAMyT,QAASK,UAAW9T,EAAAA,WAAMqJ,YAAY0K,kBACtFQ,aAAevI,MAAO,MAAOc,SAAU9M,EAAAA,WAAMyT,QAASK,UAAW9T,EAAAA,WAAMqJ,YAAY0K,kBACnFS,oBAAsBxI,MAAO,OAAQc,SAAU9M,EAAAA,WAAMyT,QAASK,UAAW9T,EAAAA,WAAMqJ,YAAY0K,kBAE3FU,UAAYzI,MAAO,MAAOc,SAAU9M,EAAAA,WAAMyT,QAASK,UAAW9T,EAAAA,WAAMqJ,YAAY0K,kBAChFW,iBAAmB1I,MAAO,OAAQc,SAAU9M,EAAAA,WAAMyT,QAASK,UAAW9T,EAAAA,WAAMqJ,YAAY0K,kBACxFY,IAAM3I,MAAO,OAAQc,SAAU9M,EAAAA,WAAMyT,QAASK,UAAW9T,EAAAA,WAAMqJ,YAAY0K,kBAC3Ea,KAAO5I,MAAO,QAASc,SAAU9M,EAAAA,WAAMyT,QAASK,UAAW9T,EAAAA,WAAMqJ,YAAY0K,kBAE7Ec,MAAQ7I,MAAO,OAAQc,SAAU9M,EAAAA,WAAMyT,QAASxH,gBAAiBjM,EAAAA,WAAMoM,MAAOpM,EAAAA,WAAMqN,WAAYyG,UAAW9T,EAAAA,WAAMqJ,YAAY0K,oBAGrIe,yBACIjS,UAEJkS,wBACIlS,OACImS,UACAvF,OACApD,WACA4I,WACAC,UACAC,QACAC,QACAC,WACAC,qBACAC,UAEJlC,YAAY,EACZM,UAAU,GAEdlG,gBAAkB5K,MAAO7C,EAAAA,WAAM8Q,cAC/B0E,aAAc,SAAU7L,EAAOqJ,GAC3B,GAAIzU,GAAOC,IACXwU,GAAWhT,EAAAA,WAAMiT,mBAAmBC,uBAAuBF,EAC3D,IAAIyC,GAAS9L,EAAM+L,YACfC,EAAqBhM,EAAMC,QAAQgM,UAAUpF,kBAAkBqF,UAAUb,OAAO,SAAUc,GAAK,MAAOA,GAAExV,aAAemV,IAAU,MAC3HjX,MAAKoL,OAEVpL,MAAK4U,yBACN5U,KAAK4U,uBAAyB,GAAIpT,GAAAA,WAAM+V,eAAeC,cAE3D,IAAIjM,EACJ,KACIA,EAAMvL,KAAKyX,SAAStM,GACtB,MAAOjL,GAEL,WADAsU,GAASkD,MAAMxX,GAInB,GACIyX,IACAnS,IAAKxF,KAAKiU,sBAAsBI,YAAcuD,mBAAmBrM,EAAIU,WAAa,IAAMjM,KAAKiU,sBAAsBG,WAAapU,KAAKiU,sBAAsBK,OAAU,QAAUtU,KAAKiU,sBAAsBK,OAAU,IACpNhG,SAAU,OACVqG,QAAS,SAAUkD,EAAMC,EAAYC,GACjC,GAAIC,GAAajY,EAAKkY,gBAAgBJ,EAAMV,EAC5C,IAAkB,GAAda,EAEA,WADAxD,GAASG,QAAQxJ,EAKrB,IADAA,EAAM+M,YAAcF,EAChBb,EAAmB/R,gBAGnB,MAFA+F,GAAM+M,YAAcF,MACpBxD,GAASG,QAAQxJ,EAGjB,IAAIgN,GAAW5W,EAAAkJ,UAAU2N,gCAAgCjN,KACzDgN,GAASvM,MAAMT,EAAMU,YAGzB2I,EAASG,QAAQxJ,IAErBuM,MAAO,SAAUK,EAAOD,EAAYO,GAChC,GAAIC,KACJ,KACIA,EAAYC,KAAKC,MAAMT,EAAMU,cAAcf,MAC7C,MAAOxX,GACLoY,EAAYD,EAAa,KAAON,EAAMU,aAE1CjE,EAASkD,MAAMY,IAIvBtY,MAAKoL,QAAQsN,eAAe3X,KAAKf,KAAM2X,GACvC3X,KAAK4U,uBAAuB+D,cAAchB,IAE9CM,gBAAiB,SAAUW,EAAYC,GAGnC,IAAK,GAFDb,GAAaY,EACbE,EAAiCpF,QAAxBmF,EAAUxT,WAA0BwT,EAAUxT,WAAarF,KAAKiU,sBAAsB5O,WAC1F1E,EAAI,EAAGA,EAAImY,EAAO9X,OAAQL,IAAK,CACpC,IAAIqX,EAAWc,EAAOnY,IAGlB,OAAO,CAFPqX,GAAaA,EAAWc,EAAOnY,IAMvC,GAAIoY,GAAmDrF,QAAlCmF,EAAUvT,qBAAoCuT,EAAUvT,qBAAuBtF,KAAKiU,sBAAsB3O,oBAC/H,IAAsB,GAAlByT,EAAwB,CACxB,GAAIC,GAAOC,OAAOD,KAAKhB,EACJ,IAAfgB,EAAKhY,SAAgBgX,EAAWgB,EAAK,aAAepL,SAAUiL,EAAUzT,mBACxE4S,EAAaA,EAAWgB,EAAK,KAGrC,MAAIhB,GAAWhX,OACJgX,GAGCA,IAEhBP,SAAU,SAAUtM,GAChB,GAAI+N,GAAU3X,EAAAkJ,UAAU0O,oBAAoBjO,QAAQC,EACpD,OAAO+N,IAEXE,eAAgB,SAAUjO,GACjBnL,KAAK4U,yBACN5U,KAAK4U,uBAAyB,GAAIpT,GAAAA,WAAM+V,eAAeC,cAE3D,IAAI0B,GAAUlZ,KAAKyX,SAAStM,EAC5B,OAAO+N,IAEXG,WAAY,SAAUC,GAClBtZ,KAAKoL,QAAUkO,GAEnBC,YAAa,SAAU/E,GACnBjT,EAAAmL,MAAMC,MAAM,GAAApL,GAAAqL,UAAc,kBAAmB,sBAElD,MAEHpL,EAAAA,WAAMqS,oBAAoB2F,iBAAiB,MAAOhY,EAAAA,WAAMiY,iBAAiBC,IAAIC,eLqsB1EhS,eAAe,iBAAiBiS,GAAG,SAAS1Y,EAAQzB,EAAOD,GAC9D,YA8BA,SAAS2B,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GA5BvF6X,OAAOY,eAAera,EAAS,cAC7B6E,OAAO,GMn4BT,IAAA9C,GAAAL,EAAA,gBNw4BIM,EAASL,EAAuBI,GMt4BpCuY,EAAA5Y,EAAA,qBACA6Y,GNy4BqB5Y,EAAuB2Y,GMz4B5C5Y,EAAA,qBACA8Y,GN44BoB7Y,EAAuB4Y,GM54B3C7Y,EAAA,qBACA+Y,GN+4BoB9Y,EAAuB6Y,GM/4B3C9Y,EAAA,wBACAgZ,GNk5BY/Y,EAAuB8Y,GMl5BnC/Y,EAAA,8BNs5BmBC,GAAuB+Y,EAI1C1a,GAAAA,WAAkBgC,EAAAA,WAClB/B,EAAOD,QAAUA,EAAQ,aAEtB2a,6BAA6B,EAAEC,sBAAsB,EAAEC,mBAAmB,EAAEC,oBAAoB,EAAEC,mBAAmB,EAAE5S,eAAe,sBAAsB,IAAI","file":"YQLProvider.min.js","sourcesContent":["﻿// JayData 1.5.10 \r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define(\"jaydata/yql\",[\"jaydata/core\"],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.$data = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define(\"$data.Yahoo.YQLContext\", _core2.default.EntityContext, null, {\n    //Geo\n    Continents: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.continent, tableName: 'geo.continents' },\n    Counties: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.county, tableName: 'geo.counties' },\n    Countries: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.country, tableName: 'geo.countries' },\n    Districts: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.district, tableName: 'geo.districts' },\n    Oceans: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.ocean, tableName: 'geo.oceans' },\n    Places: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.place, tableName: 'geo.places' },\n    PlaceTypes: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.placetype, tableName: 'geo.placetypes' },\n    PlaceSiblings: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.sibling, tableName: 'geo.places.siblings' },\n    PlaceParents: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.parent, tableName: 'geo.places.parent' },\n    PlaceNeighbors: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.neighbor, tableName: 'geo.places.neighbors' },\n    PlaceCommons: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.common, tableName: 'geo.places.common' },\n    PlaceChildrens: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.children, tableName: 'geo.places.children' },\n    PlaceBelongtos: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.belongto, tableName: 'geo.places.belongtos' },\n    PlaceAncestors: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.ancestor, tableName: 'geo.places.ancestors' },\n    Seas: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.sea, tableName: 'geo.seas' },\n    States: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.state, tableName: 'geo.states' },\n    PlaceDescendants: { type: _core2.default.EntitySet, elementType: _core2.default.Yahoo.types.Geo.descendant, tableName: 'geo.places.descendants' },\n\n    placeTypeNameRef: { value: _core2.default.Yahoo.types.Geo.placeTypeNameCf },\n    centroidRef: { value: _core2.default.Yahoo.types.Geo.centroidCf },\n    countryRef: { value: _core2.default.Yahoo.types.Geo.countryCf },\n    adminRef: { value: _core2.default.Yahoo.types.Geo.adminCf },\n    localityRef: { value: _core2.default.Yahoo.types.Geo.localityCf },\n    postalRef: { value: _core2.default.Yahoo.types.Geo.postalCf },\n    boundingBoxRef: { value: _core2.default.Yahoo.types.Geo.boundingBoxCf },\n\n    //Data\n    Atom: {\n        anonymousResult: true,\n        tableName: 'atom',\n        resultPath: [\"query\", \"results\"],\n        resultSkipFirstLevel: true,\n        type: _core2.default.EntitySet,\n        elementType: _core2.default.Class.define(\"$data.Yahoo.types.YQLAtom\", _core2.default.Entity, null, {\n            url: { type: 'string', required: true, searchable: true }\n        }, null)\n    },\n    Csv: {\n        anonymousResult: true,\n        tableName: 'csv',\n        resultPath: [\"query\", \"results\"],\n        resultSkipFirstLevel: true,\n        type: _core2.default.EntitySet,\n        elementType: _core2.default.Class.define(\"$data.Yahoo.types.YQLCsv\", _core2.default.Entity, null, {\n            url: { type: 'string', required: true, searchable: true },\n            charset: { type: 'string', searchable: true },\n            columns: { type: 'string', searchable: true }\n        }, null)\n    },\n    DataUri: {\n        anonymousResult: true,\n        tableName: 'data.uri',\n        resultPath: [\"query\", \"results\"],\n        resultSkipFirstLevel: true,\n        type: _core2.default.EntitySet,\n        elementType: _core2.default.Class.define(\"$data.Yahoo.types.YQLDataUri\", _core2.default.Entity, null, {\n            url: { type: 'string', required: true, searchable: true }\n        }, null)\n    },\n    Feed: {\n        anonymousResult: true,\n        tableName: 'feed',\n        resultPath: [\"query\", \"results\"],\n        resultSkipFirstLevel: true,\n        type: _core2.default.EntitySet,\n        elementType: _core2.default.Class.define(\"$data.Yahoo.types.YQLFeed\", _core2.default.Entity, null, {\n            url: { type: 'string', required: true, searchable: true }\n        }, null)\n    },\n    FeedNormalizer: {\n        anonymousResult: true,\n        tableName: 'feednormalizer',\n        resultPath: [\"query\", \"results\"],\n        resultSkipFirstLevel: true,\n        type: _core2.default.EntitySet,\n        elementType: _core2.default.Class.define(\"$data.Yahoo.types.YQLFeedNormalizer\", _core2.default.Entity, null, {\n            url: { type: 'string', required: true, searchable: true },\n            output: { type: 'string', searchable: true },\n            prexslurl: { type: 'string', searchable: true },\n            postxslurl: { type: 'string', searchable: true },\n            timeout: { type: 'string', searchable: true }\n        }, null)\n    },\n    Html: {\n        anonymousResult: true,\n        tableName: 'html',\n        resultPath: [\"query\", \"results\"],\n        resultSkipFirstLevel: true,\n        type: _core2.default.EntitySet,\n        elementType: _core2.default.Class.define(\"$data.Yahoo.types.YQLHtml\", _core2.default.Entity, null, {\n            url: { type: 'string', required: true, searchable: true },\n            charset: { type: 'string', searchable: true },\n            browser: { type: 'bool', searchable: true },\n            xpath: { type: 'string', searchable: true },\n            compat: { type: 'string', searchable: true, description: \"valid values for compat is 'html5' and 'html4'\" },\n            Result: { type: 'string', searchable: true }\n        }, null)\n    },\n    Json: {\n        anonymousResult: true,\n        tableName: 'json',\n        resultPath: [\"query\", \"results\"],\n        resultSkipFirstLevel: true,\n        type: _core2.default.EntitySet,\n        elementType: _core2.default.Class.define(\"$data.Yahoo.types.YQLJson\", _core2.default.Entity, null, {\n            url: { type: 'string', required: true, searchable: true },\n            itemPath: { type: 'string', searchable: true }\n        }, null)\n    },\n    Rss: {\n        anonymousResult: false,\n        tableName: 'rss',\n        resultPath: [\"query\", \"results\"],\n        resultSkipFirstLevel: true,\n        type: _core2.default.EntitySet,\n        elementType: _core2.default.Class.define(\"$data.Yahoo.types.YQLRss\", _core2.default.Entity, null, {\n            url: { type: 'string', required: true, searchable: true },\n            guid: { type: 'GuidField' },\n            title: { type: 'string' },\n            description: { type: 'string' },\n            link: { type: 'string' },\n            pubDate: { type: 'string' }\n        }, null)\n    },\n    GuidField: {\n        type: _core2.default.Class.define(\"GuidField\", _core2.default.Entity, null, {\n            isPermaLink: { type: 'string' },\n            content: { type: 'string' }\n        }, null)\n    },\n    Xml: {\n        anonymousResult: true,\n        tableName: 'xml',\n        resultPath: [\"query\", \"results\"],\n        resultSkipFirstLevel: true,\n        type: _core2.default.EntitySet,\n        elementType: _core2.default.Class.define(\"$data.Yahoo.types.YQLXml\", _core2.default.Entity, null, {\n            url: { type: 'string', required: true, searchable: true },\n            itemPath: { type: 'string', searchable: true }\n        }, null)\n    },\n    Xslt: {\n        anonymousResult: true,\n        tableName: 'xslt',\n        resultPath: [\"query\", \"results\"],\n        resultSkipFirstLevel: true,\n        type: _core2.default.EntitySet,\n        elementType: _core2.default.Class.define(\"$data.Yahoo.types.YQLXslt\", _core2.default.Entity, null, {\n            url: { type: 'string', searchable: true },\n            xml: { type: 'string', searchable: true },\n            stylesheet: { type: 'string', searchable: true },\n            stylesheetliteral: { type: 'string', searchable: true },\n            wrapperelement: { type: 'string', searchable: true }\n        }, null)\n    }\n\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],2:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.Yahoo.types.Geo.placeTypeNameCf', _core2.default.Entity, null, {\n    code: { type: 'string' },\n    content: { type: 'string' }\n}, null);\n\n_core2.default.Class.define('$data.Yahoo.types.Geo.countryCf', _core2.default.Entity, null, {\n    code: { type: 'string' },\n    type: { type: 'string' },\n    content: { type: 'string' }\n}, null);\n\n_core2.default.Class.define('$data.Yahoo.types.Geo.adminCf', _core2.default.Entity, null, {\n    code: { type: 'string' },\n    type: { type: 'string' },\n    content: { type: 'string' }\n}, null);\n\n_core2.default.Class.define('$data.Yahoo.types.Geo.localityCf', _core2.default.Entity, null, {\n    code: { type: 'string' },\n    content: { type: 'string' }\n}, null);\n\n_core2.default.Class.define('$data.Yahoo.types.Geo.centroidCf', _core2.default.Entity, null, {\n    latitude: { type: 'string' },\n    longitude: { type: 'string' }\n}, null);\n\n_core2.default.Class.define('$data.Yahoo.types.Geo.postalCf', _core2.default.Entity, null, {\n    type: { type: 'string' },\n    content: { type: 'string' }\n}, null);\n\n_core2.default.Class.define('$data.Yahoo.types.Geo.boundingBoxCf', _core2.default.Entity, null, {\n    southWest: { type: 'centroidRef' },\n    northEast: { type: 'centroidRef' }\n}, null);\n\n_core2.default.Class.define('$data.Yahoo.types.Geo.PlaceMeta', null, null, {\n    woeid: { type: 'int', key: true },\n    name: { type: 'string' },\n    uri: { type: 'string' },\n    placeTypeName: { type: 'placeTypeNameRef' },\n    lang: { type: 'string' }\n}, null);\n\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.PlaceMetaFull', [{ type: null }, { type: _core2.default.Yahoo.types.Geo.PlaceMeta }], null, {\n    country: { type: 'countryRef' },\n    admin1: { type: 'adminRef' },\n    admin2: { type: 'adminRef' },\n    admin3: { type: 'adminRef' },\n    locality1: { type: 'localityRef' },\n    locality2: { type: 'localityRef' },\n    postal: { type: 'postalRef' },\n    centroid: { type: 'centroidRef' },\n    boundingBox: { type: 'boundingBoxRef' },\n    areaRank: { type: 'int' },\n    popRank: { type: 'int' }\n}, null);\n\n_core2.default.Class.define('$data.Yahoo.types.Geo.placetype', _core2.default.Entity, null, {\n    placeTypeDescription: { type: 'string' },\n    uri: { type: 'string', key: true },\n    placeTypeName: { type: 'placeTypeNameRef' },\n    lang: { type: 'string' }\n}, null);\n\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.sibling', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMetaFull }], null, {\n    sibling_woeid: { type: 'string' }\n}, null);\n\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.parent', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMetaFull }], null, {\n    child_woeid: { type: 'string' }\n}, null);\n\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.neighbor', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMetaFull }], null, {\n    neighbor_woeid: { type: 'string' }\n}, null);\n\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.common', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMetaFull }], null, {\n    woeid1: { type: 'string' },\n    woeid2: { type: 'string' },\n    woeid3: { type: 'string' },\n    woeid4: { type: 'string' },\n    woeid5: { type: 'string' },\n    woeid6: { type: 'string' },\n    woeid7: { type: 'string' },\n    woeid8: { type: 'string' },\n    'long': { type: 'string' }\n}, null);\n\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.children', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMetaFull }], null, {\n    parent_woeid: { type: 'string' },\n    placetype: { type: 'string' }\n}, null);\n\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.belongto', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMetaFull }], null, {\n    member_woeid: { type: 'string' },\n    placetype: { type: 'string' }\n}, null);\n\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.ancestor', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMetaFull }], null, {\n    descendant_woeid: { type: 'string' }\n}, null);\n\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.place', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMetaFull }], null, {\n    text: { type: 'string' },\n    focus: { type: 'string' },\n    placetype: { type: 'string' }\n}, null);\n\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.county', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMeta }], null, {\n    place: { type: 'string' }\n}, null);\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.country', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMeta }], null, {\n    place: { type: 'string' }\n}, null);\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.district', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMeta }], null, {\n    place: { type: 'string' }\n}, null);\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.sea', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMeta }], null, {\n    place: { type: 'string' }\n}, null);\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.state', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMeta }], null, {\n    place: { type: 'string' }\n}, null);\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.continent', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMeta }], null, {\n    place: { type: 'string' },\n    view: { type: 'string' }\n}, null);\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.ocean', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMeta }], null, {\n    place: { type: 'string' },\n    view: { type: 'string' }\n}, null);\n_core2.default.Class.defineEx('$data.Yahoo.types.Geo.descendant', [{ type: _core2.default.Entity }, { type: _core2.default.Yahoo.types.Geo.PlaceMeta }], null, {\n    ancestor_woeid: { type: 'string' },\n    placetype: { type: 'string' },\n    degree: { type: 'string' },\n    view: { type: 'string' }\n}, null);\n\n_core.Container.registerType('placeTypeNameRef', _core2.default.Yahoo.types.Geo.placeTypeNameCf);\n_core.Container.registerType('centroidRef', _core2.default.Yahoo.types.Geo.centroidCf);\n_core.Container.registerType('countryRef', _core2.default.Yahoo.types.Geo.countryCf);\n_core.Container.registerType('adminRef', _core2.default.Yahoo.types.Geo.adminCf);\n_core.Container.registerType('localityRef', _core2.default.Yahoo.types.Geo.localityCf);\n_core.Container.registerType('postalRef', _core2.default.Yahoo.types.Geo.postalCf);\n_core.Container.registerType('boundingBoxRef', _core2.default.Yahoo.types.Geo.boundingBoxCf);\n\n},{\"jaydata/core\":\"jaydata/core\"}],3:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\"use strict\" // suspicious code;\n\n(0, _core.$C)('$data.storageProviders.YQL.YQLCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor() {\n        this.provider = {};\n        this.cTypeCache = {};\n    },\n\n    compile: function compile(query) {\n        this.provider = query.context.storageProvider;\n\n        var context = {\n            filterSql: { sql: '' },\n            projectionSql: { sql: '' },\n            orderSql: { sql: '' },\n            skipSql: { sql: '' },\n            takeSql: { sql: '' },\n            tableName: ''\n        };\n        this.Visit(query.expression, context);\n\n        if (context.projectionSql.sql == '') context.projectionSql.sql = \"SELECT *\";\n\n        if (context.orderSql.sql) context.orderSql.sql = \" | sort(\" + context.orderSql.sql + ')';\n\n        //special skip-take logic\n        if (context.skipSql.value && context.takeSql.value) {\n            var skipVal = context.skipSql.value;\n            context.skipSql.value = context.takeSql.value;\n            context.takeSql.value = context.takeSql.value + skipVal;\n        }\n        if (context.skipSql.value) context.skipSql.sql = context.skipSql.sqlPre + context.skipSql.value + context.skipSql.sqlSuf;\n        if (context.takeSql.value) context.takeSql.sql = context.takeSql.sqlPre + context.takeSql.value + context.takeSql.sqlSuf;\n\n        return {\n            queryText: context.projectionSql.sql + ' FROM ' + context.tableName + context.filterSql.sql + context.orderSql.sql + context.takeSql.sql + (context.takeSql.sql ? context.skipSql.sql : ''),\n            selectMapping: context.projectionSql.selectFields,\n            params: []\n        };\n    },\n\n    VisitFilterExpression: function VisitFilterExpression(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.FilterExpression\" />\n        this.Visit(expression.source, context);\n\n        context.filterSql.type = expression.nodeType;\n        if (context.filterSql.sql == '') context.filterSql.sql = ' WHERE ';else context.filterSql.sql += ' AND ';\n\n        this.Visit(expression.selector, context.filterSql);\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.ProjectionExpression\" />\n        this.Visit(expression.source, context);\n\n        context.projectionSql.type = expression.nodeType;\n        if (context.projectionSql.sql == '') context.projectionSql.sql = 'SELECT ';else _core.Guard.raise(new _core.Exception('multiple select error'));\n\n        this.Visit(expression.selector, context.projectionSql);\n    },\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.OrderExpression\" />\n        this.Visit(expression.source, context);\n\n        context.orderSql.type = expression.nodeType;\n\n        var orderContext = { sql: '' };\n        this.Visit(expression.selector, orderContext);\n        context.orderSql.sql = \"field='\" + orderContext.sql + \"', descending='\" + (expression.nodeType == _core2.default.Expressions.ExpressionType.OrderByDescending) + \"'\" + (context.orderSql.sql != '' ? ', ' + context.orderSql.sql : '');\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.PagingExpression\" />\n        this.Visit(expression.source, context);\n\n        if (expression.nodeType == _core2.default.Expressions.ExpressionType.Skip) {\n            context.skipSql.type = expression.nodeType;\n            context.skipSql.sqlPre = ' | tail(count=';\n            this.Visit(expression.amount, context.skipSql);\n            context.skipSql.sqlSuf = ')';\n        } else if (expression.nodeType == _core2.default.Expressions.ExpressionType.Take) {\n            context.takeSql.type = expression.nodeType;\n            context.takeSql.sqlPre = ' | truncate(count=';\n            this.Visit(expression.amount, context.takeSql);\n            context.takeSql.sqlSuf = ')';\n        }\n    },\n\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, context) {\n        context.sql += \"(\";\n        var left = this.Visit(expression.left, context);\n        context.sql += expression.resolution.mapTo;\n\n        if (expression.resolution.resolvableType && !_core.Guard.requireType(expression.resolution.mapTo + ' expression.right.value', expression.right.value, expression.resolution.resolvableType)) {\n            _core.Guard.raise(new _core.Exception(expression.right.type + \" not allowed in '\" + expression.resolution.mapTo + \"' statement\", \"invalid operation\"));\n        }\n\n        if (expression.resolution.name === 'in' && expression.right.value instanceof Array) {\n            var self = this;\n            context.sql += \"(\";\n            expression.right.value.forEach(function (item, i) {\n                if (i > 0) context.sql += \", \";\n                self.Visit(item, context);\n            });\n            context.sql += \")\";\n        } else {\n            var right = this.Visit(expression.right, context);\n        }\n        context.sql += \")\";\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        var memberName;\n        if (context.wasComplex === true) context.sql += '.';\n        context.sql += expression.memberName;\n\n        if (context.isComplex == true) {\n            context.complex += expression.memberName;\n            context.wasComplex = true;\n        } else {\n            context.wasComplex = false;\n            if (context.complex) memberName = context.complex + expression.memberName;else memberName = expression.memberName;\n\n            context.complex = null;\n            //context.sql += memberName;\n            //context.fieldName = memberName;\n            context.fieldData = { name: memberName, dataType: expression.memberDefinition.dataType };\n\n            if (context.type == 'Projection' && !context.selectFields) context.selectFields = [{ from: memberName, dataType: expression.memberDefinition.dataType }];\n        }\n    },\n\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        if (context.type == 'Projection') _core.Guard.raise(new _core.Exception('Constant value is not supported in Projection.', 'Not supported!'));\n\n        this.VisitQueryParameterExpression(expression, context);\n    },\n\n    VisitQueryParameterExpression: function VisitQueryParameterExpression(expression, context) {\n        context.value = expression.value;\n        var expressionValueType = _core.Container.resolveType(expression.type); //Container.resolveType(Container.getTypeName(expression.value));\n        if (expression.value instanceof _core2.default.Queryable) {\n            context.sql += '(' + expression.value.toTraceString().queryText + ')';\n        } else if (this.provider.supportedDataTypes.indexOf(expressionValueType) != -1) context.sql += this.provider.fieldConverter.toDb[_core.Container.resolveName(expressionValueType)](expression.value);else {\n            context.sql += \"\" + expression.value + \"\";\n        }\n    },\n\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        if (context.type == 'Projection') {\n            this.Visit(expression.expression, context);\n            if (expression.expression instanceof _core2.default.Expressions.ComplexTypeExpression) {\n                context.selectFields = context.selectFields || [];\n                var type = expression.expression.entityType;\n                var includes = this._getComplexTypeIncludes(type);\n                context.selectFields.push({ from: context.complex, type: type, includes: includes });\n            }\n        } else {\n\n            var exp = this.Visit(expression.expression, context);\n            context.parameters = expression.parameters;\n        }\n    },\n\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        if (context.type) {\n            if (!context.complex) context.complex = '';\n        } else {\n            context.tableName = expression.instance.tableName;\n        }\n    },\n\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, context) {\n        var self = this;\n        context.selectFields = context.selectFields || [];\n        expression.members.forEach(function (member) {\n            if (member.expression instanceof _core2.default.Expressions.ObjectLiteralExpression) {\n                context.mappingPrefix = context.mappingPrefix || [];\n                context.mappingPrefix.push(member.fieldName);\n                self.Visit(member, context);\n                context.mappingPrefix.pop();\n            } else {\n                if (context.selectFields.length > 0) context.sql += ', ';\n                self.Visit(member, context);\n\n                var mapping = { from: context.fieldData.name, to: context.mappingPrefix instanceof Array ? context.mappingPrefix.join('.') + '.' + member.fieldName : member.fieldName };\n                if (context.selectType) {\n                    mapping.type = context.selectType;\n                    var includes = this._getComplexTypeIncludes(context.selectType);\n                    mapping.includes = includes;\n                } else {\n                    mapping.dataType = context.fieldData.dataType;\n                }\n                context.selectFields.push(mapping);\n\n                delete context.fieldData;\n                delete context.selectType;\n            }\n        }, this);\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, context) {\n        this.Visit(expression.expression, context);\n        if (expression.expression instanceof _core2.default.Expressions.ComplexTypeExpression) {\n            context.fieldData = context.fieldData || {};\n            context.fieldData.name = context.complex;\n            context.selectType = expression.expression.entityType;\n        }\n    },\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, context) {\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n\n        var opDef = expression.operation.memberDefinition;\n        var opName = opDef.mapTo || opDef.name;\n\n        context.sql += '(';\n\n        if (opDef.expressionInParameter == false) this.Visit(expression.source, context);\n\n        context.sql += opName;\n        var paramCounter = 0;\n        var params = opDef.parameters || [];\n\n        var args = params.map(function (item, index) {\n            var result = { dataType: item.dataType, prefix: item.prefix, suffix: item.suffix };\n            if (item.value) {\n                result.value = item.value;\n            } else if (item.name === \"@expression\") {\n                result.value = expression.source;\n            } else {\n                result.value = expression.parameters[paramCounter];\n                result.itemType = expression.parameters[paramCounter++].type;\n            };\n            return result;\n        });\n\n        args.forEach(function (arg, index) {\n            var itemType = arg.itemType ? _core.Container.resolveType(arg.itemType) : null;\n            if (!itemType || arg.dataType instanceof Array && arg.dataType.indexOf(itemType) != -1 || arg.dataType == itemType) {\n                if (index > 0) {\n                    context.sql += \", \";\n                };\n                var funcContext = { sql: '' };\n                this.Visit(arg.value, funcContext);\n\n                if (opName == ' LIKE ') {\n                    var valueType = _core.Container.getTypeName(funcContext.value);\n                    context.sql += valueType == 'string' ? \"'\" : \"\";\n                    context.sql += (arg.prefix ? arg.prefix : '') + funcContext.value + (arg.suffix ? arg.suffix : '');\n                    context.sql += valueType == 'string' ? \"'\" : \"\";\n                } else {\n                    context.sql += funcContext.sql;\n                }\n            } else _core.Guard.raise(new _core.Exception(itemType + \" not allowed in '\" + expression.operation.memberName + \"' statement\", \"invalid operation\"));\n        }, this);\n\n        if (opDef.rigthValue) context.sql += opDef.rigthValue;else context.sql += \"\";\n\n        context.sql += ')';\n    },\n\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        context.isComplex = true;\n        this.Visit(expression.selector, context);\n        context.isComplex = false;\n\n        if (context.complex != '' /*&& context.isComplex*/) context.complex += '.';\n    },\n\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        this.Visit(expression.source, context);\n    },\n\n    _findComplexType: function _findComplexType(type, result, depth) {\n        type.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n            var dataType = _core.Container.resolveType(memDef.dataType);\n            if (dataType.isAssignableTo && !dataType.isAssignableTo(_core2.default.EntitySet)) {\n                var name = depth ? depth + '.' + memDef.name : memDef.name;\n                result.push({ name: name, type: dataType });\n                this._findComplexType(dataType, result, name);\n            }\n        }, this);\n    },\n    _getComplexTypeIncludes: function _getComplexTypeIncludes(type) {\n        if (!this.cTypeCache[type.name]) {\n            var inc = [];\n            this._findComplexType(type, inc);\n            this.cTypeCache[type.name] = inc;\n        }\n        return this.cTypeCache[type.name];\n    }\n\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.YQLConverter = {\n    fromDb: {\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter,\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter,\n        '$data.Number': function $dataNumber(value) {\n            return typeof value === \"number\" ? value : parseInt(value);\n        },\n        '$data.Integer': function $dataInteger(value) {\n            return typeof value === \"number\" ? value : parseFloat(value);\n        },\n        '$data.String': _core2.default.Container.proxyConverter,\n        '$data.Date': function $dataDate(value) {\n            return new Date(typeof value === \"string\" ? parseInt(value) : value);\n        },\n        '$data.Boolean': function $dataBoolean(value) {\n            return !!value;\n        },\n        '$data.Blob': _core2.default.Container.proxyConverter,\n        '$data.Array': function $dataArray(value) {\n            if (value === undefined) {\n                return new _core2.default.Array();\n            }return value;\n        }\n    },\n    toDb: {\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter,\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter,\n        '$data.Number': _core2.default.Container.proxyConverter,\n        '$data.Integer': _core2.default.Container.proxyConverter,\n        '$data.String': function $dataString(value) {\n            return \"'\" + value + \"'\";\n        },\n        '$data.Date': function $dataDate(value) {\n            return value ? value.valueOf() : null;\n        },\n        '$data.Boolean': _core2.default.Container.proxyConverter,\n        '$data.Blob': _core2.default.Container.proxyConverter,\n        '$data.Array': function $dataArray(value) {\n            return '(' + value.join(', ') + ')';\n        }\n    }\n};\n\n},{\"jaydata/core\":\"jaydata/core\"}],5:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.storageProviders.YQL.YQLProvider', _core2.default.StorageProviderBase, null, {\n    constructor: function constructor(cfg) {\n        var provider = this;\n        this.SqlCommands = [];\n        this.context = {};\n        this.extendedCreateNew = [];\n        this.providerConfiguration = _core2.default.typeSystem.extend({\n            YQLFormat: \"format=json\",\n            YQLQueryUrl: \"http://query.yahooapis.com/v1/public/yql?q=\",\n            YQLEnv: '',\n            resultPath: [\"query\", \"results\"],\n            resultSkipFirstLevel: true\n        }, cfg);\n        this.initializeStore = function (callBack) {\n            callBack = _core2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n            callBack.success(this.context);\n        };\n    },\n    AuthenticationProvider: { dataType: '$data.Authentication.AuthenticationBase', enumerable: false },\n    supportedDataTypes: { value: [_core2.default.Integer, _core2.default.Number, _core2.default.Date, _core2.default.String, _core2.default.Boolean, _core2.default.Blob, _core2.default.Array], writable: false },\n    supportedFieldOperations: {\n        value: {\n            'contains': {\n                dataType: _core2.default.String,\n                allowedIn: _core2.default.Expressions.FilterExpression,\n                mapTo: ' LIKE ',\n                expressionInParameter: false,\n                parameters: [{ name: 'inStatement', dataType: _core2.default.String, prefix: '%', suffix: '%' }]\n            },\n            'startsWith': {\n                dataType: _core2.default.String,\n                allowedIn: _core2.default.Expressions.FilterExpression,\n                mapTo: ' LIKE ',\n                expressionInParameter: false,\n                parameters: [{ name: 'inStatement', dataType: _core2.default.String, suffix: '%' }]\n            },\n            'endsWith': {\n                dataType: _core2.default.String,\n                allowedIn: _core2.default.Expressions.FilterExpression,\n                mapTo: ' LIKE ',\n                expressionInParameter: false,\n                parameters: [{ name: 'inStatement', dataType: _core2.default.String, prefix: '%' }]\n            }\n        },\n        enumerable: true,\n        writable: true\n    },\n    supportedBinaryOperators: {\n        value: {\n            equal: { mapTo: ' = ', dataType: _core2.default.Boolean, allowedIn: _core2.default.Expressions.FilterExpression },\n            notEqual: { mapTo: ' != ', dataType: _core2.default.Boolean, allowedIn: _core2.default.Expressions.FilterExpression },\n            equalTyped: { mapTo: ' = ', dataType: _core2.default.Boolean, allowedIn: _core2.default.Expressions.FilterExpression },\n            notEqualTyped: { mapTo: ' != ', dataType: _core2.default.Boolean, allowedIn: _core2.default.Expressions.FilterExpression },\n            greaterThan: { mapTo: ' > ', dataType: _core2.default.Boolean, allowedIn: _core2.default.Expressions.FilterExpression },\n            greaterThanOrEqual: { mapTo: ' >= ', dataType: _core2.default.Boolean, allowedIn: _core2.default.Expressions.FilterExpression },\n\n            lessThan: { mapTo: ' < ', dataType: _core2.default.Boolean, allowedIn: _core2.default.Expressions.FilterExpression },\n            lessThenOrEqual: { mapTo: ' <= ', dataType: _core2.default.Boolean, allowedIn: _core2.default.Expressions.FilterExpression },\n            or: { mapTo: ' OR ', dataType: _core2.default.Boolean, allowedIn: _core2.default.Expressions.FilterExpression },\n            and: { mapTo: ' AND ', dataType: _core2.default.Boolean, allowedIn: _core2.default.Expressions.FilterExpression },\n\n            \"in\": { mapTo: \" IN \", dataType: _core2.default.Boolean, resolvableType: [_core2.default.Array, _core2.default.Queryable], allowedIn: _core2.default.Expressions.FilterExpression }\n        }\n    },\n    supportedUnaryOperators: {\n        value: {}\n    },\n    supportedSetOperations: {\n        value: {\n            filter: {},\n            map: {},\n            forEach: {},\n            toArray: {},\n            single: {},\n            take: {},\n            skip: {},\n            orderBy: {},\n            orderByDescending: {},\n            first: {}\n        },\n        enumerable: true,\n        writable: true\n    },\n    fieldConverter: { value: _core2.default.YQLConverter },\n    executeQuery: function executeQuery(query, callBack) {\n        var self = this;\n        callBack = _core2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n        var schema = query.defaultType;\n        var entitSetDefinition = query.context.getType().memberDefinitions.asArray().filter(function (m) {\n            return m.elementType == schema;\n        })[0] || {};\n        var ctx = this.context;\n\n        if (!this.AuthenticationProvider) this.AuthenticationProvider = new _core2.default.Authentication.Anonymous({});\n\n        var sql;\n        try {\n            sql = this._compile(query);\n        } catch (e) {\n            callBack.error(e);\n            return;\n        }\n\n        var includes = [];\n        var requestData = {\n            url: this.providerConfiguration.YQLQueryUrl + encodeURIComponent(sql.queryText) + \"&\" + this.providerConfiguration.YQLFormat + (this.providerConfiguration.YQLEnv ? \"&env=\" + this.providerConfiguration.YQLEnv : \"\"),\n            dataType: \"JSON\",\n            success: function success(data, textStatus, jqXHR) {\n                var resultData = self._preProcessData(data, entitSetDefinition);\n                if (resultData == false) {\n                    callBack.success(query);\n                    return;\n                }\n\n                query.rawDataList = resultData;\n                if (entitSetDefinition.anonymousResult) {\n                    query.rawDataList = resultData;\n                    callBack.success(query);\n                    return;\n                } else {\n                    var compiler = _core.Container.createModelBinderConfigCompiler(query, []);\n                    compiler.Visit(query.expression);\n                }\n\n                callBack.success(query);\n            },\n            error: function error(jqXHR, textStatus, errorThrow) {\n                var errorData = {};\n                try {\n                    errorData = JSON.parse(jqXHR.responseText).error;\n                } catch (e) {\n                    errorData = errorThrow + ': ' + jqXHR.responseText;\n                }\n                callBack.error(errorData);\n            }\n        };\n\n        this.context.prepareRequest.call(this, requestData);\n        this.AuthenticationProvider.CreateRequest(requestData);\n    },\n    _preProcessData: function _preProcessData(jsonResult, entityDef) {\n        var resultData = jsonResult;\n        var depths = entityDef.resultPath != undefined ? entityDef.resultPath : this.providerConfiguration.resultPath;\n        for (var i = 0; i < depths.length; i++) {\n            if (resultData[depths[i]]) resultData = resultData[depths[i]];else {\n                return false;\n            }\n        }\n\n        var skipFirstLevel = entityDef.resultSkipFirstLevel != undefined ? entityDef.resultSkipFirstLevel : this.providerConfiguration.resultSkipFirstLevel;\n        if (skipFirstLevel == true) {\n            var keys = Object.keys(resultData);\n            if (keys.length == 1 && (resultData[keys[0]] instanceof Array || !entityDef.anonymousResult)) resultData = resultData[keys[0]];\n        }\n\n        if (resultData.length) {\n            return resultData;\n        } else return [resultData];\n    },\n    _compile: function _compile(query) {\n        var sqlText = _core.Container.createYQLCompiler().compile(query);\n        return sqlText;\n    },\n    getTraceString: function getTraceString(query) {\n        if (!this.AuthenticationProvider) this.AuthenticationProvider = new _core2.default.Authentication.Anonymous({});\n\n        var sqlText = this._compile(query);\n        return sqlText;\n    },\n    setContext: function setContext(ctx) {\n        this.context = ctx;\n    },\n    saveChanges: function saveChanges(callBack) {\n        _core.Guard.raise(new _core.Exception(\"Not Implemented\", \"Not Implemented\"));\n    }\n}, null);\n\n_core2.default.StorageProviderBase.registerProvider(\"YQL\", _core2.default.storageProviders.YQL.YQLProvider);\n\n},{\"jaydata/core\":\"jaydata/core\"}],6:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _YQLConverter = _dereq_('./YQLConverter.js');\n\nvar _YQLConverter2 = _interopRequireDefault(_YQLConverter);\n\nvar _YQLProvider = _dereq_('./YQLProvider.js');\n\nvar _YQLProvider2 = _interopRequireDefault(_YQLProvider);\n\nvar _YQLCompiler = _dereq_('./YQLCompiler.js');\n\nvar _YQLCompiler2 = _interopRequireDefault(_YQLCompiler);\n\nvar _geo = _dereq_('./EntitySets/geo.js');\n\nvar _geo2 = _interopRequireDefault(_geo);\n\nvar _YQLContext = _dereq_('./EntitySets/YQLContext.js');\n\nvar _YQLContext2 = _interopRequireDefault(_YQLContext);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _core2.default;\nmodule.exports = exports['default'];\n\n},{\"./EntitySets/YQLContext.js\":1,\"./EntitySets/geo.js\":2,\"./YQLCompiler.js\":3,\"./YQLConverter.js\":4,\"./YQLProvider.js\":5,\"jaydata/core\":\"jaydata/core\"}]},{},[6])(6)\n});\n\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define(\"$data.Yahoo.YQLContext\", $data.EntityContext, null, {\r\n    //Geo\r\n    Continents: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.continent, tableName: 'geo.continents' },\r\n    Counties: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.county, tableName: 'geo.counties' },\r\n    Countries: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.country, tableName: 'geo.countries' },\r\n    Districts: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.district, tableName: 'geo.districts' },\r\n    Oceans: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.ocean, tableName: 'geo.oceans' },\r\n    Places: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.place, tableName: 'geo.places' },\r\n    PlaceTypes: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.placetype, tableName: 'geo.placetypes' },\r\n    PlaceSiblings: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.sibling, tableName: 'geo.places.siblings' },\r\n    PlaceParents: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.parent, tableName: 'geo.places.parent' },\r\n    PlaceNeighbors: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.neighbor, tableName: 'geo.places.neighbors' },\r\n    PlaceCommons: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.common, tableName: 'geo.places.common' },\r\n    PlaceChildrens: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.children, tableName: 'geo.places.children' },\r\n    PlaceBelongtos: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.belongto, tableName: 'geo.places.belongtos' },\r\n    PlaceAncestors: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.ancestor, tableName: 'geo.places.ancestors' },\r\n    Seas: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.sea, tableName: 'geo.seas' },\r\n    States: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.state, tableName: 'geo.states' },\r\n    PlaceDescendants: { type: $data.EntitySet, elementType: $data.Yahoo.types.Geo.descendant, tableName: 'geo.places.descendants' },\r\n\r\n    placeTypeNameRef: { value: $data.Yahoo.types.Geo.placeTypeNameCf },\r\n    centroidRef: { value: $data.Yahoo.types.Geo.centroidCf },\r\n    countryRef: { value: $data.Yahoo.types.Geo.countryCf },\r\n    adminRef: { value: $data.Yahoo.types.Geo.adminCf },\r\n    localityRef: { value: $data.Yahoo.types.Geo.localityCf },\r\n    postalRef: { value: $data.Yahoo.types.Geo.postalCf },\r\n    boundingBoxRef: { value: $data.Yahoo.types.Geo.boundingBoxCf },\r\n\r\n    //Data\r\n    Atom: {\r\n        anonymousResult: true,\r\n        tableName: 'atom',\r\n        resultPath: [\"query\", \"results\"],\r\n        resultSkipFirstLevel: true,\r\n        type: $data.EntitySet,\r\n        elementType: $data.Class.define(\"$data.Yahoo.types.YQLAtom\", $data.Entity, null, {\r\n            url: { type: 'string', required: true, searchable: true }\r\n        }, null)\r\n    },\r\n    Csv: {\r\n        anonymousResult: true,\r\n        tableName: 'csv',\r\n        resultPath: [\"query\", \"results\"],\r\n        resultSkipFirstLevel: true,\r\n        type: $data.EntitySet,\r\n        elementType: $data.Class.define(\"$data.Yahoo.types.YQLCsv\", $data.Entity, null, {\r\n            url: { type: 'string', required: true, searchable: true },\r\n            charset: { type: 'string', searchable: true },\r\n            columns: { type: 'string', searchable: true }\r\n        }, null)\r\n    },\r\n    DataUri: {\r\n        anonymousResult: true,\r\n        tableName: 'data.uri',\r\n        resultPath: [\"query\", \"results\"],\r\n        resultSkipFirstLevel: true,\r\n        type: $data.EntitySet,\r\n        elementType: $data.Class.define(\"$data.Yahoo.types.YQLDataUri\", $data.Entity, null, {\r\n            url: { type: 'string', required: true, searchable: true }\r\n        }, null)\r\n    },\r\n    Feed: {\r\n        anonymousResult: true,\r\n        tableName: 'feed',\r\n        resultPath: [\"query\", \"results\"],\r\n        resultSkipFirstLevel: true,\r\n        type: $data.EntitySet,\r\n        elementType: $data.Class.define(\"$data.Yahoo.types.YQLFeed\", $data.Entity, null, {\r\n            url: { type: 'string', required: true, searchable: true }\r\n        }, null)\r\n    },\r\n    FeedNormalizer: {\r\n        anonymousResult: true,\r\n        tableName: 'feednormalizer',\r\n        resultPath: [\"query\", \"results\"],\r\n        resultSkipFirstLevel: true,\r\n        type: $data.EntitySet,\r\n        elementType: $data.Class.define(\"$data.Yahoo.types.YQLFeedNormalizer\", $data.Entity, null, {\r\n            url: { type: 'string', required: true, searchable: true },\r\n            output: { type: 'string', searchable: true },\r\n            prexslurl: { type: 'string', searchable: true },\r\n            postxslurl: { type: 'string', searchable: true },\r\n            timeout: { type: 'string', searchable: true }\r\n        }, null)\r\n    },\r\n    Html: {\r\n        anonymousResult: true,\r\n        tableName: 'html',\r\n        resultPath: [\"query\", \"results\"],\r\n        resultSkipFirstLevel: true,\r\n        type: $data.EntitySet,\r\n        elementType: $data.Class.define(\"$data.Yahoo.types.YQLHtml\", $data.Entity, null, {\r\n            url: { type: 'string', required: true, searchable: true },\r\n            charset: { type: 'string', searchable: true },\r\n            browser: { type: 'bool', searchable: true },\r\n            xpath: { type: 'string', searchable: true },\r\n            compat: { type: 'string', searchable: true, description: \"valid values for compat is 'html5' and 'html4'\" },\r\n            Result: { type: 'string', searchable: true }\r\n        }, null)\r\n    },\r\n    Json: {\r\n        anonymousResult: true,\r\n        tableName: 'json',\r\n        resultPath: [\"query\", \"results\"],\r\n        resultSkipFirstLevel: true,\r\n        type: $data.EntitySet,\r\n        elementType: $data.Class.define(\"$data.Yahoo.types.YQLJson\", $data.Entity, null, {\r\n            url: { type: 'string', required: true, searchable: true },\r\n            itemPath: { type: 'string', searchable: true }\r\n        }, null)\r\n    },\r\n    Rss: {\r\n        anonymousResult: false,\r\n        tableName: 'rss',\r\n        resultPath: [\"query\", \"results\"],\r\n        resultSkipFirstLevel: true,\r\n        type: $data.EntitySet,\r\n        elementType: $data.Class.define(\"$data.Yahoo.types.YQLRss\", $data.Entity, null, {\r\n            url: { type: 'string', required: true, searchable: true },\r\n            guid: { type: 'GuidField' },\r\n            title: { type: 'string' },\r\n            description: { type: 'string' },\r\n            link: { type: 'string' },\r\n            pubDate: { type: 'string' }\r\n        }, null)\r\n    },\r\n    GuidField: {\r\n        type: $data.Class.define(\"GuidField\", $data.Entity, null, {\r\n            isPermaLink: { type: 'string' },\r\n            content: { type: 'string' }\r\n        }, null)\r\n    },\r\n    Xml: {\r\n        anonymousResult: true,\r\n        tableName: 'xml',\r\n        resultPath: [\"query\", \"results\"],\r\n        resultSkipFirstLevel: true,\r\n        type: $data.EntitySet,\r\n        elementType: $data.Class.define(\"$data.Yahoo.types.YQLXml\", $data.Entity, null, {\r\n            url: { type: 'string', required: true, searchable: true },\r\n            itemPath: { type: 'string', searchable: true }\r\n        }, null)\r\n    },\r\n    Xslt: {\r\n        anonymousResult: true,\r\n        tableName: 'xslt',\r\n        resultPath: [\"query\", \"results\"],\r\n        resultSkipFirstLevel: true,\r\n        type: $data.EntitySet,\r\n        elementType: $data.Class.define(\"$data.Yahoo.types.YQLXslt\", $data.Entity, null, {\r\n            url: { type: 'string', searchable: true },\r\n            xml: { type: 'string', searchable: true },\r\n            stylesheet: { type: 'string', searchable: true },\r\n            stylesheetliteral: { type: 'string', searchable: true },\r\n            wrapperelement: { type: 'string', searchable: true }\r\n        }, null)\r\n    }\r\n\r\n}, null);","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.Yahoo.types.Geo.placeTypeNameCf', $data.Entity, null, {\r\n    code: { type: 'string' },\r\n    content: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.define('$data.Yahoo.types.Geo.countryCf', $data.Entity, null, {\r\n    code: { type: 'string' },\r\n    type: { type: 'string' },\r\n    content: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.define('$data.Yahoo.types.Geo.adminCf', $data.Entity, null, {\r\n    code: { type: 'string' },\r\n    type: { type: 'string' },\r\n    content: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.define('$data.Yahoo.types.Geo.localityCf', $data.Entity, null, {\r\n    code: { type: 'string' },\r\n    content: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.define('$data.Yahoo.types.Geo.centroidCf', $data.Entity, null, {\r\n    latitude: { type: 'string' },\r\n    longitude: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.define('$data.Yahoo.types.Geo.postalCf', $data.Entity, null, {\r\n    type: { type: 'string' },\r\n    content: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.define('$data.Yahoo.types.Geo.boundingBoxCf', $data.Entity, null, {\r\n    southWest: { type: 'centroidRef' },\r\n    northEast: { type: 'centroidRef' }\r\n}, null);\r\n\r\n$data.Class.define('$data.Yahoo.types.Geo.PlaceMeta', null, null, {\r\n    woeid: { type: 'int', key: true },\r\n    name: { type: 'string' },\r\n    uri: { type: 'string' },\r\n    placeTypeName: { type: 'placeTypeNameRef' },\r\n    lang: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.PlaceMetaFull', [{ type: null }, { type: $data.Yahoo.types.Geo.PlaceMeta }], null, {\r\n    country: { type: 'countryRef' },\r\n    admin1: { type: 'adminRef' },\r\n    admin2: { type: 'adminRef' },\r\n    admin3: { type: 'adminRef' },\r\n    locality1: { type: 'localityRef' },\r\n    locality2: { type: 'localityRef' },\r\n    postal: { type: 'postalRef' },\r\n    centroid: { type: 'centroidRef' },\r\n    boundingBox: { type: 'boundingBoxRef' },\r\n    areaRank: { type: 'int' },\r\n    popRank: { type: 'int' }\r\n}, null);\r\n\r\n\r\n$data.Class.define('$data.Yahoo.types.Geo.placetype', $data.Entity, null, {\r\n    placeTypeDescription: { type: 'string' },\r\n    uri: { type: 'string', key: true },\r\n    placeTypeName: { type: 'placeTypeNameRef' },\r\n    lang: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.sibling', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMetaFull }], null, {\r\n    sibling_woeid: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.parent', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMetaFull }], null, {\r\n    child_woeid: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.neighbor', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMetaFull }], null, {\r\n    neighbor_woeid: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.common', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMetaFull }], null, {\r\n    woeid1: { type: 'string' },\r\n    woeid2: { type: 'string' },\r\n    woeid3: { type: 'string' },\r\n    woeid4: { type: 'string' },\r\n    woeid5: { type: 'string' },\r\n    woeid6: { type: 'string' },\r\n    woeid7: { type: 'string' },\r\n    woeid8: { type: 'string' },\r\n    'long': { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.children', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMetaFull }], null, {\r\n    parent_woeid: { type: 'string' },\r\n    placetype: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.belongto', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMetaFull }], null, {\r\n    member_woeid: { type: 'string' },\r\n    placetype: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.ancestor', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMetaFull }], null, {\r\n    descendant_woeid: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.place', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMetaFull }], null, {\r\n    text: { type: 'string' },\r\n    focus: { type: 'string' },\r\n    placetype: { type: 'string' }\r\n}, null);\r\n\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.county', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMeta }], null, {\r\n    place: { type: 'string' }\r\n}, null);\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.country', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMeta }], null, {\r\n    place: { type: 'string' }\r\n}, null);\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.district', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMeta }], null, {\r\n    place: { type: 'string' }\r\n}, null);\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.sea', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMeta }], null, {\r\n    place: { type: 'string' }\r\n}, null);\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.state', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMeta }], null, {\r\n    place: { type: 'string' }\r\n}, null);\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.continent', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMeta }], null, {\r\n    place: { type: 'string' },\r\n    view: { type: 'string' }\r\n}, null);\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.ocean', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMeta }], null, {\r\n    place: { type: 'string' },\r\n    view: { type: 'string' }\r\n}, null);\r\n$data.Class.defineEx('$data.Yahoo.types.Geo.descendant', [{ type: $data.Entity }, { type: $data.Yahoo.types.Geo.PlaceMeta }], null, {\r\n    ancestor_woeid: { type: 'string' },\r\n    placetype: { type: 'string' },\r\n    degree: { type: 'string' },\r\n    view: { type: 'string' }\r\n}, null);\r\n\r\nContainer.registerType('placeTypeNameRef', $data.Yahoo.types.Geo.placeTypeNameCf);\r\nContainer.registerType('centroidRef', $data.Yahoo.types.Geo.centroidCf);\r\nContainer.registerType('countryRef', $data.Yahoo.types.Geo.countryCf);\r\nContainer.registerType('adminRef', $data.Yahoo.types.Geo.adminCf);\r\nContainer.registerType('localityRef', $data.Yahoo.types.Geo.localityCf);\r\nContainer.registerType('postalRef', $data.Yahoo.types.Geo.postalCf);\r\nContainer.registerType('boundingBoxRef', $data.Yahoo.types.Geo.boundingBoxCf);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n//\"use strict\" // suspicious code;\r\n\r\n$C('$data.storageProviders.YQL.YQLCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function () {\r\n        this.provider = {};\r\n        this.cTypeCache = {};\r\n    },\r\n\r\n    compile: function (query) {\r\n        this.provider = query.context.storageProvider;\r\n\r\n        var context = {\r\n            filterSql: { sql: '' },\r\n            projectionSql: { sql: '' },\r\n            orderSql: { sql: '' },\r\n            skipSql: { sql: '' },\r\n            takeSql: { sql: '' },\r\n            tableName: ''\r\n        };\r\n        this.Visit(query.expression, context);\r\n\r\n        if (context.projectionSql.sql == '')\r\n            context.projectionSql.sql = \"SELECT *\";\r\n\r\n        if (context.orderSql.sql)\r\n            context.orderSql.sql = \" | sort(\" + context.orderSql.sql + ')';\r\n\r\n        //special skip-take logic\r\n        if (context.skipSql.value && context.takeSql.value) {\r\n            var skipVal = context.skipSql.value;\r\n            context.skipSql.value = context.takeSql.value;\r\n            context.takeSql.value = context.takeSql.value + skipVal;\r\n        }\r\n        if (context.skipSql.value) context.skipSql.sql = context.skipSql.sqlPre + context.skipSql.value + context.skipSql.sqlSuf\r\n        if (context.takeSql.value) context.takeSql.sql = context.takeSql.sqlPre + context.takeSql.value + context.takeSql.sqlSuf\r\n\r\n        return {\r\n            queryText: context.projectionSql.sql + ' FROM ' + context.tableName +\r\n                context.filterSql.sql +\r\n                context.orderSql.sql +\r\n                context.takeSql.sql +\r\n                (context.takeSql.sql ? context.skipSql.sql : ''),\r\n            selectMapping: context.projectionSql.selectFields,\r\n            params: []\r\n        };\r\n\r\n    },\r\n\r\n    VisitFilterExpression: function (expression, context) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.FilterExpression\" />\r\n        this.Visit(expression.source, context);\r\n\r\n        context.filterSql.type = expression.nodeType;\r\n        if (context.filterSql.sql == '')\r\n            context.filterSql.sql = ' WHERE ';\r\n        else\r\n            context.filterSql.sql += ' AND ';\r\n\r\n        this.Visit(expression.selector, context.filterSql);\r\n    },\r\n    VisitProjectionExpression: function (expression, context) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ProjectionExpression\" />\r\n        this.Visit(expression.source, context);\r\n\r\n        context.projectionSql.type = expression.nodeType;\r\n        if (context.projectionSql.sql == '')\r\n            context.projectionSql.sql = 'SELECT ';\r\n        else\r\n            Guard.raise(new Exception('multiple select error'));\r\n\r\n        this.Visit(expression.selector, context.projectionSql);\r\n    },\r\n    VisitOrderExpression: function (expression, context) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.OrderExpression\" />\r\n        this.Visit(expression.source, context);\r\n\r\n        context.orderSql.type = expression.nodeType;\r\n\r\n        var orderContext = { sql: '' };\r\n        this.Visit(expression.selector, orderContext);\r\n        context.orderSql.sql = \"field='\" + orderContext.sql + \"', descending='\" + (expression.nodeType == $data.Expressions.ExpressionType.OrderByDescending) + \"'\" +\r\n            (context.orderSql.sql != '' ? (', ' + context.orderSql.sql) : '');\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.PagingExpression\" />\r\n        this.Visit(expression.source, context);\r\n\r\n        if (expression.nodeType == $data.Expressions.ExpressionType.Skip) {\r\n            context.skipSql.type = expression.nodeType;\r\n            context.skipSql.sqlPre = ' | tail(count=';\r\n            this.Visit(expression.amount, context.skipSql);\r\n            context.skipSql.sqlSuf = ')';\r\n        }\r\n        else if (expression.nodeType == $data.Expressions.ExpressionType.Take) {\r\n            context.takeSql.type = expression.nodeType;\r\n            context.takeSql.sqlPre = ' | truncate(count=';\r\n            this.Visit(expression.amount, context.takeSql);\r\n            context.takeSql.sqlSuf = ')';\r\n        }\r\n    },\r\n\r\n    VisitSimpleBinaryExpression: function (expression, context) {\r\n        context.sql += \"(\";\r\n        var left = this.Visit(expression.left, context);\r\n        context.sql += expression.resolution.mapTo;\r\n\r\n        if (expression.resolution.resolvableType &&\r\n            !Guard.requireType(expression.resolution.mapTo + ' expression.right.value', expression.right.value, expression.resolution.resolvableType)) {\r\n                Guard.raise(new Exception(expression.right.type + \" not allowed in '\" + expression.resolution.mapTo + \"' statement\", \"invalid operation\"));\r\n            }\r\n\r\n        if (expression.resolution.name === 'in' && expression.right.value instanceof Array) {\r\n            var self = this;\r\n            context.sql += \"(\";\r\n            expression.right.value.forEach(function (item, i) {\r\n                if (i > 0) context.sql += \", \";\r\n                self.Visit(item, context);\r\n            });\r\n            context.sql += \")\";\r\n        } else {\r\n            var right = this.Visit(expression.right, context);\r\n        }\r\n        context.sql += \")\";\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        var memberName;\r\n        if (context.wasComplex === true)\r\n            context.sql += '.';\r\n        context.sql += expression.memberName;\r\n\r\n        if (context.isComplex == true) {\r\n            context.complex += expression.memberName;\r\n            context.wasComplex = true;\r\n        }\r\n        else {\r\n            context.wasComplex = false;\r\n            if (context.complex)\r\n                memberName = context.complex + expression.memberName;\r\n            else\r\n                memberName = expression.memberName;\r\n\r\n            context.complex = null;\r\n            //context.sql += memberName;\r\n            //context.fieldName = memberName;\r\n            context.fieldData = { name: memberName, dataType: expression.memberDefinition.dataType };\r\n\r\n            if (context.type == 'Projection' && !context.selectFields)\r\n                context.selectFields = [{ from: memberName, dataType: expression.memberDefinition.dataType }];\r\n        }\r\n    },\r\n\r\n    VisitConstantExpression: function (expression, context) {\r\n        if (context.type == 'Projection')\r\n            Guard.raise(new Exception('Constant value is not supported in Projection.', 'Not supported!'));\r\n\r\n        this.VisitQueryParameterExpression(expression, context);\r\n    },\r\n\r\n    VisitQueryParameterExpression: function (expression, context) {\r\n        context.value = expression.value;\r\n        var expressionValueType = Container.resolveType(expression.type); //Container.resolveType(Container.getTypeName(expression.value));\r\n        if (expression.value instanceof $data.Queryable) {\r\n            context.sql += '(' + expression.value.toTraceString().queryText + ')';\r\n        } else if (this.provider.supportedDataTypes.indexOf(expressionValueType) != -1)\r\n            context.sql += this.provider.fieldConverter.toDb[Container.resolveName(expressionValueType)](expression.value);\r\n        else {\r\n            context.sql += \"\" + expression.value + \"\";\r\n        }\r\n    },\r\n\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        if (context.type == 'Projection') {\r\n            this.Visit(expression.expression, context);\r\n            if (expression.expression instanceof $data.Expressions.ComplexTypeExpression) {\r\n                context.selectFields = context.selectFields || [];\r\n                var type = expression.expression.entityType;\r\n                var includes = this._getComplexTypeIncludes(type);\r\n                context.selectFields.push({ from: context.complex, type: type, includes: includes });\r\n            }\r\n\r\n        } else {\r\n\r\n            var exp = this.Visit(expression.expression, context);\r\n            context.parameters = expression.parameters;\r\n        }\r\n    },\r\n\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        if (context.type) {\r\n            if (!context.complex)\r\n                context.complex = '';\r\n        }\r\n        else {\r\n            context.tableName = expression.instance.tableName;\r\n        }\r\n\r\n    },\r\n\r\n    VisitObjectLiteralExpression: function (expression, context) {\r\n        var self = this;\r\n        context.selectFields = context.selectFields || [];\r\n        expression.members.forEach(function (member) {\r\n            if (member.expression instanceof $data.Expressions.ObjectLiteralExpression) {\r\n                context.mappingPrefix = context.mappingPrefix || []\r\n                context.mappingPrefix.push(member.fieldName);\r\n                self.Visit(member, context);\r\n                context.mappingPrefix.pop();\r\n            }\r\n            else {\r\n                if (context.selectFields.length > 0)\r\n                    context.sql += ', ';\r\n                self.Visit(member, context);\r\n\r\n                var mapping = { from: context.fieldData.name, to: (context.mappingPrefix instanceof Array ? context.mappingPrefix.join('.') + '.' + member.fieldName : member.fieldName) };\r\n                if (context.selectType) {\r\n                    mapping.type = context.selectType;\r\n                    var includes = this._getComplexTypeIncludes(context.selectType);\r\n                    mapping.includes = includes;\r\n                } else {\r\n                    mapping.dataType = context.fieldData.dataType;\r\n                }\r\n                context.selectFields.push(mapping);\r\n\r\n                delete context.fieldData;\r\n                delete context.selectType;\r\n            }\r\n        }, this);\r\n    },\r\n    VisitObjectFieldExpression: function (expression, context) {\r\n        this.Visit(expression.expression, context);\r\n        if (expression.expression instanceof $data.Expressions.ComplexTypeExpression) {\r\n            context.fieldData = context.fieldData || {};\r\n            context.fieldData.name = context.complex;\r\n            context.selectType = expression.expression.entityType;\r\n        }\r\n    },\r\n    VisitEntityFieldOperationExpression: function (expression, context) {\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n\r\n        var opDef = expression.operation.memberDefinition;\r\n        var opName = opDef.mapTo || opDef.name;\r\n\r\n        context.sql += '(';\r\n\r\n        if (opDef.expressionInParameter == false)\r\n            this.Visit(expression.source, context);\r\n\r\n        context.sql += opName;\r\n        var paramCounter = 0;\r\n        var params = opDef.parameters || [];\r\n\r\n        var args = params.map(function (item, index) {\r\n            var result = { dataType: item.dataType, prefix: item.prefix, suffix: item.suffix };\r\n            if (item.value) {\r\n                result.value = item.value;\r\n            } else if (item.name === \"@expression\") {\r\n                result.value = expression.source;\r\n            } else {\r\n                result.value = expression.parameters[paramCounter];\r\n                result.itemType = expression.parameters[paramCounter++].type;\r\n            };\r\n            return result;\r\n        });\r\n\r\n        args.forEach(function (arg, index) {\r\n            var itemType = arg.itemType ? Container.resolveType(arg.itemType) : null;\r\n            if (!itemType || ((arg.dataType instanceof Array && arg.dataType.indexOf(itemType) != -1) || arg.dataType == itemType)) {\r\n                if (index > 0) {\r\n                    context.sql += \", \";\r\n                };\r\n                var funcContext = { sql: '' };\r\n                this.Visit(arg.value, funcContext);\r\n\r\n                if (opName == ' LIKE ') {\r\n                    var valueType = Container.getTypeName(funcContext.value)\r\n                    context.sql += valueType == 'string' ? \"'\" : \"\";\r\n                    context.sql += (arg.prefix ? arg.prefix : '') + funcContext.value + (arg.suffix ? arg.suffix : '')\r\n                    context.sql += valueType == 'string' ? \"'\" : \"\";\r\n                } else {\r\n                    context.sql += funcContext.sql;\r\n                }\r\n\r\n            } else\r\n                Guard.raise(new Exception(itemType + \" not allowed in '\" + expression.operation.memberName + \"' statement\", \"invalid operation\"));\r\n        }, this);\r\n\r\n        if (opDef.rigthValue) context.sql += opDef.rigthValue;\r\n        else context.sql += \"\"\r\n\r\n        context.sql += ')';\r\n    },\r\n\r\n    VisitComplexTypeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        context.isComplex = true;\r\n        this.Visit(expression.selector, context);\r\n        context.isComplex = false;\r\n\r\n        if (context.complex != '' /*&& context.isComplex*/)\r\n            context.complex += '.';\r\n\r\n    },\r\n\r\n    VisitEntityExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n    },\r\n\r\n    _findComplexType: function (type, result, depth) {\r\n        type.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n            var dataType = Container.resolveType(memDef.dataType)\r\n            if (dataType.isAssignableTo && !dataType.isAssignableTo($data.EntitySet)) {\r\n                var name = (depth ? depth + '.' + memDef.name : memDef.name);\r\n                result.push({ name: name, type: dataType });\r\n                this._findComplexType(dataType, result, name);\r\n            }\r\n        }, this);\r\n    },\r\n    _getComplexTypeIncludes: function (type) {\r\n        if (!this.cTypeCache[type.name]) {\r\n            var inc = [];\r\n            this._findComplexType(type, inc);\r\n            this.cTypeCache[type.name] = inc;\r\n        }\r\n        return this.cTypeCache[type.name];\r\n    }\r\n\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.YQLConverter = {\r\n    fromDb: {\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n        '$data.Number': function (value) { return typeof value === \"number\" ? value : parseInt(value); },\r\n        '$data.Integer': function (value) { return typeof value === \"number\" ? value : parseFloat(value); },\r\n        '$data.String': $data.Container.proxyConverter,\r\n        '$data.Date': function (value) { return new Date(typeof value === \"string\" ? parseInt(value) : value); },\r\n        '$data.Boolean': function (value) { return !!value },\r\n        '$data.Blob': $data.Container.proxyConverter,\r\n        '$data.Array': function (value) { if (value === undefined) { return new $data.Array(); } return value; }\r\n    },\r\n    toDb: {\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n        '$data.Number': $data.Container.proxyConverter,\r\n        '$data.Integer': $data.Container.proxyConverter,\r\n        '$data.String': function (value) { return \"'\" + value + \"'\"; },\r\n        '$data.Date': function (value) { return value ? value.valueOf() : null; },\r\n        '$data.Boolean': $data.Container.proxyConverter,\r\n        '$data.Blob': $data.Container.proxyConverter,\r\n        '$data.Array': function (value) { return '(' + value.join(', ') + ')'; }\r\n    }\r\n};\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.storageProviders.YQL.YQLProvider', $data.StorageProviderBase, null,\r\n{\r\n    constructor: function (cfg) {\r\n        var provider = this;\r\n        this.SqlCommands = [];\r\n        this.context = {};\r\n        this.extendedCreateNew = [];\r\n        this.providerConfiguration = $data.typeSystem.extend({\r\n            YQLFormat: \"format=json\",\r\n            YQLQueryUrl: \"http://query.yahooapis.com/v1/public/yql?q=\",\r\n            YQLEnv: '',\r\n            resultPath: [\"query\", \"results\"],\r\n            resultSkipFirstLevel: true\r\n        }, cfg);\r\n        this.initializeStore = function (callBack) {\r\n            callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n            callBack.success(this.context);\r\n        };\r\n\r\n    },\r\n    AuthenticationProvider: { dataType: '$data.Authentication.AuthenticationBase', enumerable: false },\r\n    supportedDataTypes: { value: [$data.Integer, $data.Number, $data.Date, $data.String, $data.Boolean, $data.Blob, $data.Array], writable: false },\r\n    supportedFieldOperations: {\r\n        value: {\r\n            'contains': {\r\n                dataType: $data.String,\r\n                allowedIn: $data.Expressions.FilterExpression,\r\n                mapTo: ' LIKE ',\r\n                expressionInParameter: false,\r\n                parameters: [{ name: 'inStatement', dataType: $data.String, prefix: '%', suffix: '%' }]\r\n            },\r\n            'startsWith': {\r\n                dataType: $data.String,\r\n                allowedIn: $data.Expressions.FilterExpression,\r\n                mapTo: ' LIKE ',\r\n                expressionInParameter: false,\r\n                parameters: [{ name: 'inStatement', dataType: $data.String, suffix: '%' }]\r\n            },\r\n            'endsWith': {\r\n                dataType: $data.String,\r\n                allowedIn: $data.Expressions.FilterExpression,\r\n                mapTo: ' LIKE ',\r\n                expressionInParameter: false,\r\n                parameters: [{ name: 'inStatement', dataType: $data.String, prefix: '%' }]\r\n            }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    supportedBinaryOperators: {\r\n        value: {\r\n            equal: { mapTo: ' = ', dataType: $data.Boolean, allowedIn: $data.Expressions.FilterExpression },\r\n            notEqual: { mapTo: ' != ', dataType: $data.Boolean, allowedIn: $data.Expressions.FilterExpression },\r\n            equalTyped: { mapTo: ' = ', dataType: $data.Boolean, allowedIn: $data.Expressions.FilterExpression },\r\n            notEqualTyped: { mapTo: ' != ', dataType: $data.Boolean, allowedIn: $data.Expressions.FilterExpression },\r\n            greaterThan: { mapTo: ' > ', dataType: $data.Boolean, allowedIn: $data.Expressions.FilterExpression },\r\n            greaterThanOrEqual: { mapTo: ' >= ', dataType: $data.Boolean, allowedIn: $data.Expressions.FilterExpression },\r\n\r\n            lessThan: { mapTo: ' < ', dataType: $data.Boolean, allowedIn: $data.Expressions.FilterExpression },\r\n            lessThenOrEqual: { mapTo: ' <= ', dataType: $data.Boolean, allowedIn: $data.Expressions.FilterExpression },\r\n            or: { mapTo: ' OR ', dataType: $data.Boolean, allowedIn: $data.Expressions.FilterExpression },\r\n            and: { mapTo: ' AND ', dataType: $data.Boolean, allowedIn: $data.Expressions.FilterExpression },\r\n\r\n            \"in\": { mapTo: \" IN \", dataType: $data.Boolean, resolvableType: [$data.Array, $data.Queryable], allowedIn: $data.Expressions.FilterExpression }\r\n        }\r\n    },\r\n    supportedUnaryOperators: {\r\n        value: {}\r\n    },\r\n    supportedSetOperations: {\r\n        value: {\r\n            filter: {},\r\n            map: {},\r\n            forEach: {},\r\n            toArray: {},\r\n            single: {},\r\n            take: {},\r\n            skip: {},\r\n            orderBy: {},\r\n            orderByDescending: {},\r\n            first: {}\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    fieldConverter: { value: $data.YQLConverter },\r\n    executeQuery: function (query, callBack) {\r\n        var self = this;\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        var schema = query.defaultType;\r\n        var entitSetDefinition = query.context.getType().memberDefinitions.asArray().filter(function (m) { return m.elementType == schema })[0] || {};\r\n        var ctx = this.context;\r\n\r\n        if (!this.AuthenticationProvider)\r\n            this.AuthenticationProvider = new $data.Authentication.Anonymous({});\r\n\r\n        var sql;\r\n        try {\r\n            sql = this._compile(query);\r\n        } catch (e) {\r\n            callBack.error(e);\r\n            return;\r\n        }\r\n\r\n        var includes = [];\r\n        var requestData = {\r\n            url: this.providerConfiguration.YQLQueryUrl + encodeURIComponent(sql.queryText) + \"&\" + this.providerConfiguration.YQLFormat + (this.providerConfiguration.YQLEnv ? (\"&env=\" + this.providerConfiguration.YQLEnv) : \"\"),\r\n            dataType: \"JSON\",\r\n            success: function (data, textStatus, jqXHR) {\r\n                var resultData = self._preProcessData(data, entitSetDefinition);\r\n                if (resultData == false) {\r\n                    callBack.success(query);\r\n                    return;\r\n                }\r\n\r\n                query.rawDataList = resultData;\r\n                if (entitSetDefinition.anonymousResult) {\r\n                    query.rawDataList = resultData;\r\n                    callBack.success(query);\r\n                    return;\r\n                } else {\r\n                    var compiler = Container.createModelBinderConfigCompiler(query, []);\r\n                    compiler.Visit(query.expression);\r\n                }\r\n\r\n                callBack.success(query);\r\n            },\r\n            error: function (jqXHR, textStatus, errorThrow) {\r\n                var errorData = {};\r\n                try {\r\n                    errorData = JSON.parse(jqXHR.responseText).error;\r\n                } catch (e) {\r\n                    errorData = errorThrow + ': ' + jqXHR.responseText;\r\n                }\r\n                callBack.error(errorData);\r\n            }\r\n        };\r\n\r\n        this.context.prepareRequest.call(this, requestData);\r\n        this.AuthenticationProvider.CreateRequest(requestData);\r\n    },\r\n    _preProcessData: function (jsonResult, entityDef) {\r\n        var resultData = jsonResult;\r\n        var depths = entityDef.resultPath != undefined ? entityDef.resultPath : this.providerConfiguration.resultPath;\r\n        for (var i = 0; i < depths.length; i++) {\r\n            if (resultData[depths[i]])\r\n                resultData = resultData[depths[i]];\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        var skipFirstLevel = entityDef.resultSkipFirstLevel != undefined ? entityDef.resultSkipFirstLevel : this.providerConfiguration.resultSkipFirstLevel;\r\n        if (skipFirstLevel == true) {\r\n            var keys = Object.keys(resultData);\r\n            if (keys.length == 1 && (resultData[keys[0]] instanceof Array || !entityDef.anonymousResult))\r\n                resultData = resultData[keys[0]];\r\n        }\r\n\r\n        if (resultData.length) {\r\n            return resultData;\r\n        }\r\n        else\r\n            return [resultData]\r\n    },\r\n    _compile: function (query) {\r\n        var sqlText = Container.createYQLCompiler().compile(query);\r\n        return sqlText;\r\n    },\r\n    getTraceString: function (query) {\r\n        if (!this.AuthenticationProvider)\r\n            this.AuthenticationProvider = new $data.Authentication.Anonymous({});\r\n\r\n        var sqlText = this._compile(query);\r\n        return sqlText;\r\n    },\r\n    setContext: function (ctx) {\r\n        this.context = ctx;\r\n    },\r\n    saveChanges: function (callBack) {\r\n        Guard.raise(new Exception(\"Not Implemented\", \"Not Implemented\"));\r\n    }\r\n}, null);\r\n\r\n$data.StorageProviderBase.registerProvider(\"YQL\", $data.storageProviders.YQL.YQLProvider);\r\n","import $data from 'jaydata/core';\r\n\r\nimport YQLConverter from './YQLConverter.js';\r\nimport YQLProvider from './YQLProvider.js';\r\nimport YQLCompiler from './YQLCompiler.js';\r\nimport geo from './EntitySets/geo.js';\r\nimport YQLContext from './EntitySets/YQLContext.js';\r\n\r\nexport default $data;\r\n"],"sourceRoot":"/source/"}